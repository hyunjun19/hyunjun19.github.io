{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/webkit-error.png","path":"images/webkit-error.png","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/landscape/.gitignore","hash":"58d26d4b5f2f94c2d02a4e4a448088e4a2527c77","modified":1505955295000},{"_id":"themes/landscape/Gruntfile.js","hash":"71adaeaac1f3cc56e36c49d549b8d8a72235c9b9","modified":1505955295000},{"_id":"themes/landscape/.DS_Store","hash":"c382e91dd2f72e2007a9380b6d7aa9dfc80f8231","modified":1503634546000},{"_id":"source/.DS_Store","hash":"1bdc0b7697086180f3fac6296d9352a516e0cdab","modified":1506126355000},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1505955295000},{"_id":"themes/landscape/README.md","hash":"c7e83cfe8f2c724fc9cac32bd71bb5faf9ceeddb","modified":1505955295000},{"_id":"themes/landscape/package.json","hash":"85358dc34311c6662e841584e206a4679183943f","modified":1505955295000},{"_id":"themes/landscape/_config.yml","hash":"fb8c98a0f6ff9f962637f329c22699721854cd73","modified":1505955295000},{"_id":"source/_posts/how-cookie-works.md","hash":"e308e127c2042531ca0bacf5a37925f7db689302","modified":1506131045000},{"_id":"source/_posts/.DS_Store","hash":"71acb4aa3f4483f09e911c960f5fac4cc0411086","modified":1506126402000},{"_id":"source/_posts/server-network-perf.md","hash":"2242808a6244bacf8bc5bbbf30f5c2746eba48fd","modified":1505955295000},{"_id":"source/_posts/ts-ios-wifi-webkit-error.md","hash":"6b898778a00e17a77dba404b33fe61a9d928e5aa","modified":1505957692000},{"_id":"source/_posts/ts-spring-session-oome.md","hash":"0ae128ba4b9bca2f28d0084fbee43772860e74a5","modified":1505955295000},{"_id":"source/images/webkit-error.png","hash":"2f96a352cae97eb708e47ee75c367f8728ad69a5","modified":1505955295000},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1505955295000},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1505955295000},{"_id":"themes/landscape/languages/fr.yml","hash":"84ab164b37c6abf625473e9a0c18f6f815dd5fd9","modified":1505955295000},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1505955295000},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1505955295000},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1505955295000},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1505955295000},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1505955295000},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1505955295000},{"_id":"themes/landscape/layout/layout.ejs","hash":"f155824ca6130080bb057fa3e868a743c69c4cf5","modified":1505955295000},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1505955295000},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1505955295000},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505955295000},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1505955295000},{"_id":"themes/landscape/source/.DS_Store","hash":"3037d5331d92d3f549f33102664cadfff9459707","modified":1503634546000},{"_id":"themes/landscape/scripts/fancybox.js","hash":"aa411cd072399df1ddc8e2181a3204678a5177d9","modified":1505955295000},{"_id":"source/_posts/ts-ios-wifi-webkit-error/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1505957609000},{"_id":"source/_posts/ts-ios-wifi-webkit-error/webkit-error.png","hash":"c66697ade7667f53aaaeb0b3179c27840b8999c5","modified":1505957631000},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"82a30f81c0e8ba4a8af17acd6cc99e93834e4d5e","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"931aaaffa0910a48199388ede576184ff15793ee","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"c4c835615d96a950d51fa2c3b5d64d0596534fed","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"f921e7f9223d7c95165e0f835f353b2938e40c45","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"93518893cf91287e797ebac543c560e2a63b8d0e","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"c21ca56f419d01a9f49c27b6be9f4a98402b2aa3","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"4fe8853e864d192701c03e5cd3a5390287b90612","modified":1505955295000},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1505955295000},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1505955295000},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"0d4f064733f8b9e45c0ce131fe4a689d570c883a","modified":1505955295000},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1505955295000},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1505955295000},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1505955295000},{"_id":"themes/landscape/source/css/.DS_Store","hash":"489e4612ad71be2fd5fb4eb6cbb81cd7d51626ee","modified":1503634551000},{"_id":"themes/landscape/source/css/_variables.styl","hash":"5e37a6571caf87149af83ac1cc0cdef99f117350","modified":1505955295000},{"_id":"themes/landscape/source/css/style.styl","hash":"a70d9c44dac348d742702f6ba87e5bb3084d65db","modified":1505955295000},{"_id":"themes/landscape/source/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1505955295000},{"_id":"source/_posts/how-cookie-works/breadcrumbs.jpg","hash":"e719fdae6f7b1f90246819b20750be661a3ae84b","modified":1505832994000},{"_id":"source/_posts/how-cookie-works/http-req-res.png","hash":"9ab4094f32da7113f22b91652972bc97fc165e39","modified":1506127876000},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"6197802873157656e3077c5099a7dda3d3b01c29","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1505955295000},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"2f275739b6f1193c123646a5a31f37d48644c667","modified":1505955295000},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1505955295000},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"10685f8787a79f79c9a26c2f943253450c498e3e","modified":1505955295000},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1505955295000},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1505955295000},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1505955295000},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1505955295000},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1505955295000},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1505955295000},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1505955295000},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1505955295000},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1505955295000},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1505955295000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1505955295000},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1505955295000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1505955295000},{"_id":"themes/landscape/source/css/images/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1503635029000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1505955295000},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1505955295000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1505955295000},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1505955295000},{"_id":"source/_posts/server-network-perf/highway-393492_1920.jpg","hash":"3b51268260b4815eeba39daac39bb23f74a918f9","modified":1505955295000},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"bc56e9cb49fdb42ebede0282b7edeef2dc48126c","modified":1505955295000},{"_id":"source/_posts/how-cookie-works/dev-tools-cookie.png","hash":"f04e8b9f5dc0f99c0075061a70e62a1764adaf14","modified":1505866330000},{"_id":"public/2017/09/23/how-cookie-works/index.html","hash":"cc54520df593a92491e0466f917545e0c9c68ba4","modified":1506131140393},{"_id":"public/2017/09/21/server-network-perf/index.html","hash":"7aac1f2282b0aac2e24f42b5f58878c3cc99c00b","modified":1506131140393},{"_id":"public/2017/08/24/ts-ios-wifi-webkit-error/index.html","hash":"b032a1afdc30a4e483b16e0a4ff04123e19641d6","modified":1506131140393},{"_id":"public/archives/index.html","hash":"cc040510300f23598785d5c98cb4eff0283ee7bc","modified":1506131140393},{"_id":"public/archives/2017/index.html","hash":"1946572b57cf4f6e847bbab1c6dba4cb9b299e29","modified":1506131140393},{"_id":"public/archives/2017/08/index.html","hash":"f28e6deb1f7fe4ec599f4b1e96bdda0cf9e7ddad","modified":1506131140393},{"_id":"public/archives/2017/09/index.html","hash":"35b7f37cbb6e52ee00bc0877dcac786eb8532cd4","modified":1506131140394},{"_id":"public/2017/08/24/ts-spring-session-oome/index.html","hash":"8b8f4aa7d216bc4909a900659c4a992cdd5e4292","modified":1506131140394},{"_id":"public/index.html","hash":"d27449b2465e6adc24fb0b9651aa815d82d672cc","modified":1506131140394},{"_id":"public/images/webkit-error.png","hash":"2f96a352cae97eb708e47ee75c367f8728ad69a5","modified":1506131140399},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1506131140399},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1506131140399},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1506131140399},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1506131140399},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1506131140400},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1506131140400},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1506131140400},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1506131140400},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1506131140400},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1506131140400},{"_id":"public/2017/08/24/ts-ios-wifi-webkit-error/webkit-error.png","hash":"c66697ade7667f53aaaeb0b3179c27840b8999c5","modified":1506131140400},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1506131140892},{"_id":"public/2017/09/23/how-cookie-works/breadcrumbs.jpg","hash":"e719fdae6f7b1f90246819b20750be661a3ae84b","modified":1506131140895},{"_id":"public/2017/09/23/how-cookie-works/http-req-res.png","hash":"9ab4094f32da7113f22b91652972bc97fc165e39","modified":1506131140895},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1506131140899},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1506131140899},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1506131140899},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1506131140899},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1506131140899},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1506131140899},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1506131140899},{"_id":"public/css/style.css","hash":"fffb3966bf36057a325498aba9ce3a2ea7bd79e1","modified":1506131140899},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1506131140899},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1506131140899},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"46fcc0194d75a0ddac0a038aee41b23456784814","modified":1506131140901},{"_id":"public/2017/09/21/server-network-perf/highway-393492_1920.jpg","hash":"3b51268260b4815eeba39daac39bb23f74a918f9","modified":1506131140917},{"_id":"public/css/images/banner.jpg","hash":"bc56e9cb49fdb42ebede0282b7edeef2dc48126c","modified":1506131140923},{"_id":"public/2017/09/23/how-cookie-works/dev-tools-cookie.png","hash":"f04e8b9f5dc0f99c0075061a70e62a1764adaf14","modified":1506131140931}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"how-cookie-works","date":"2017-09-23T00:25:33.000Z","_content":"\n# How Cookie Works\n\n## Cookie란?\nHTTP는 기본적으로 [무상태 프로토콜](https://ko.wikipedia.org/wiki/무상태_프로토콜)입니다. \nHTTP 서버가 클라이언트에 대한 상태를 가지고 있지 않기 때문에 각각의 요청을 이전 요청과 무관한 독립적인 트랜잭션으로 취급하게 됩니다.\n하지만 그렇게 되면 세션과 개인화(회원별 서비스)등을 관리할 수 없게 되기 때문에 Cookie(이하 쿠키)를 사용하게 됩니다.\n\nHTTP의 쿠키는 마치 헨젤과 그레텔의 쿠키(~~돌맹이나 빵 버전도 있습니다.~~)와 같습니다.\n헨젤과 그레텔은 자신들이 돌아갈 길을 잊지 않기 위해서 사용하지만 HTTP의 쿠키는 HTTP 요청을 보내는 클라이언트를 식별하기 위해서 사용합니다.\n{% asset_img 'breadcrumbs.jpg' '헨젤과 그레텔의 쿠키' %}\n\n## HTTP 메시지\n__***[주의] 아래 설명은 웹 브라우저를 기반으로 설명한 내용입니다. 서버나 앱, 크롤러 등 다른 클라이언트에서 HTTP를 호출하는 경우 설정에 따라 다르게 동작합니다.***__\n{% asset_img 'http-req-res.png' '쿠키 생성 과정' %}\n1. 최초 HTTP 요청\n  * 웹브라우저에서 처음 방문하는 웹사이트에 요청을 보냅니다.\n1. 세션 ID 발급\n  * ``Set-Cookie:s_u_k=2ecf65a9-3678-497c-a620-640a88cabb44; Expires=Fri, 20-Oct-2017 15:24:31 GMT; Path=/``\n  * ``Set-Cookie:SESSION=b5e3d1d6-bdcf-4d13-9502-9a9a654d35c1; Path=/; Secure; HttpOnly``\n  * ``Set-Cookie`` 필드에 대한 상세 정보는 [MDN 문서](https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Set-Cookie)를 참고해주세요.\n  * __***[주의] 모든 사이트가 항상 최초의 요청에 세션 ID를 발급하는 것은 아닙니다. 하지만 일반적으로 거의 모든 사이트가 사용자 추적을 위해서 최초 방문시 세션 ID를 발급하며 세션 ID 명이나 값 등의 상세 정책은 사이트마다 다를 수 있습니다.***__\n1. 모든 요청 헤더에 Cookie 포함\n  * ``Cookie:s_u_k=2ecf65a9-3678-497c-a620-640a88cabb44; SESSION=b5e3d1d6-bdcf-4d13-9502-9a9a654d35c1``\n  * 이때 동일한 도메인으로 보내는 모든 요청에 쿠키가 포함되어 요청이 날아갑니다. HTML, CSS, JS, 이미지 등 모든 요청 헤더에 쿠키가 달라붙습니다. 아래 [상세 내용](#주의하세요)을 참고해 주세요.\n1. 응답 헤더에는 Cookie 미포함\n\n## 주의하세요~\n예전에는 쿠키를 브라우저의 클라이언트 데이터 저장용으로 사용하는 경우도 있었지만 ``localStorage``, ``sessionStorage``(IE8 이상 지원)가 있는 이상 더 이상 쿠키를 데이터 베이스처럼 사용해서는 안됩니다.\n쿠키는 크기 제한(브라우저 마다 다릅니다.)이 있으며 HTTP 요청을 주고 받을 때 마다 헤더를 통해서 전송이 되므로 성능상 낭비가 일어나게 됩니다.\nIE8 이전의 시대에는 대안이 없었지만 현재는 IE8 미만의 브라우저는 거의 없으므로 클라이언트 데이터 저장은 용도에 맞게 ``localStorage``, ``sessionStorage``에 저장해야 합니다.\n\n쿠키의 크기가 1KB, 화면 하나에 HTTP 요청이 10개, 서버에 사용자가 동시에 100명이 동시에 접속한다고 가정하면 서버에 1MB의 불필요한 트래픽이 발생하게 됩니다.\n동시접속 사용자가 적을 경우는 괜찮지만 서비스가 성장하게 되면 반드시 성능상 문제가 발생하게 됩니다.\n\n## 쿠키 상세 정보\n{% asset_img 'dev-tools-cookie.png' '크롬 개발자 도구 Application 탭' %}\n1. Name\n  * 쿠키 이름(키))\n1. Value\n  * 쿠키 값\n1. Domain\n  * 쿠키가 적용될 도메인 정보\n  * 브라우저는 도메인 정보가 같은 쿠키만 요청 헤더에 ``Cookie`` 필드를 자동으로 추가 합니다.\n1. Path\n  * 쿠키를 경로를 지정해서 마치 폴더와 같이 관리할 수 있습니다.\n1. Expires\n  * ``Expires``에 명시된 날짜에 쿠키가 만료(삭제)됩니다.\n  * ``Expires``, ``Max-Age``가 명시되지 않은 경우 세션 쿠키입니다. 브라우저가 종료되면 해당 쿠키는 삭제됩니다. 하지만 요즘 브라우저들은 종료되었다가 다시 시작되어도 [이전 세션을 복원하는 기능]((https://support.mozilla.org/ko/kb/restore-previous-session#w_eieo-hiuayi-ykiiaooe-hlou)이 있어서 세션이 계속 유지되는 경우가 많습니다.\n1. HttpOnly\n  * ``HttpOnly`` 필드가 선언되면 스크립트에서는 해당 쿠키에 접근할 수 없습니다. 하지만 브라우저가 아닌 다른 클라이언트(ex. 크롤러)에서 접근하면 해당 정보를 취득할 수 있습니다.\n1. Secure\n  * ``Secure`` 필드가 선언되면 해당 쿠키는 HTTPS(SSL) 프로토콜을 사용한 경우에만 전송이 됩니다. 하지만 그렇다고 하더라도 절대로 민감한 정보를 담아서는 안됩니다.\n좀 더 상세한 내용은 MDN에서 한글로 번역된 [상세한 문서](https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies)를 참고해 주세요.\n\n## 쿠키를 이용한 세션관리\n웹에서는 쿠키를 이용해서 세션을 관리하게 됩니다.\n쿠키를 이용한 세션관리는 다음 편에서 별도로 설명하겠습니다.\n\n## 관련자료\n[MDN HTTP 쿠키](https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies)\n[MDN Set-Cookie](https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Set-Cookie)\n[RFC-6265](https://tools.ietf.org/html/rfc6265#section-4.1)\n[브라우저 세션 복원](https://support.mozilla.org/ko/kb/restore-previous-session#w_eieo-hiuayi-ykiiaooe-hlou)\n","source":"_posts/how-cookie-works.md","raw":"---\ntitle: how-cookie-works\ndate: 2017-09-23 09:25:33\ntags:\n---\n\n# How Cookie Works\n\n## Cookie란?\nHTTP는 기본적으로 [무상태 프로토콜](https://ko.wikipedia.org/wiki/무상태_프로토콜)입니다. \nHTTP 서버가 클라이언트에 대한 상태를 가지고 있지 않기 때문에 각각의 요청을 이전 요청과 무관한 독립적인 트랜잭션으로 취급하게 됩니다.\n하지만 그렇게 되면 세션과 개인화(회원별 서비스)등을 관리할 수 없게 되기 때문에 Cookie(이하 쿠키)를 사용하게 됩니다.\n\nHTTP의 쿠키는 마치 헨젤과 그레텔의 쿠키(~~돌맹이나 빵 버전도 있습니다.~~)와 같습니다.\n헨젤과 그레텔은 자신들이 돌아갈 길을 잊지 않기 위해서 사용하지만 HTTP의 쿠키는 HTTP 요청을 보내는 클라이언트를 식별하기 위해서 사용합니다.\n{% asset_img 'breadcrumbs.jpg' '헨젤과 그레텔의 쿠키' %}\n\n## HTTP 메시지\n__***[주의] 아래 설명은 웹 브라우저를 기반으로 설명한 내용입니다. 서버나 앱, 크롤러 등 다른 클라이언트에서 HTTP를 호출하는 경우 설정에 따라 다르게 동작합니다.***__\n{% asset_img 'http-req-res.png' '쿠키 생성 과정' %}\n1. 최초 HTTP 요청\n  * 웹브라우저에서 처음 방문하는 웹사이트에 요청을 보냅니다.\n1. 세션 ID 발급\n  * ``Set-Cookie:s_u_k=2ecf65a9-3678-497c-a620-640a88cabb44; Expires=Fri, 20-Oct-2017 15:24:31 GMT; Path=/``\n  * ``Set-Cookie:SESSION=b5e3d1d6-bdcf-4d13-9502-9a9a654d35c1; Path=/; Secure; HttpOnly``\n  * ``Set-Cookie`` 필드에 대한 상세 정보는 [MDN 문서](https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Set-Cookie)를 참고해주세요.\n  * __***[주의] 모든 사이트가 항상 최초의 요청에 세션 ID를 발급하는 것은 아닙니다. 하지만 일반적으로 거의 모든 사이트가 사용자 추적을 위해서 최초 방문시 세션 ID를 발급하며 세션 ID 명이나 값 등의 상세 정책은 사이트마다 다를 수 있습니다.***__\n1. 모든 요청 헤더에 Cookie 포함\n  * ``Cookie:s_u_k=2ecf65a9-3678-497c-a620-640a88cabb44; SESSION=b5e3d1d6-bdcf-4d13-9502-9a9a654d35c1``\n  * 이때 동일한 도메인으로 보내는 모든 요청에 쿠키가 포함되어 요청이 날아갑니다. HTML, CSS, JS, 이미지 등 모든 요청 헤더에 쿠키가 달라붙습니다. 아래 [상세 내용](#주의하세요)을 참고해 주세요.\n1. 응답 헤더에는 Cookie 미포함\n\n## 주의하세요~\n예전에는 쿠키를 브라우저의 클라이언트 데이터 저장용으로 사용하는 경우도 있었지만 ``localStorage``, ``sessionStorage``(IE8 이상 지원)가 있는 이상 더 이상 쿠키를 데이터 베이스처럼 사용해서는 안됩니다.\n쿠키는 크기 제한(브라우저 마다 다릅니다.)이 있으며 HTTP 요청을 주고 받을 때 마다 헤더를 통해서 전송이 되므로 성능상 낭비가 일어나게 됩니다.\nIE8 이전의 시대에는 대안이 없었지만 현재는 IE8 미만의 브라우저는 거의 없으므로 클라이언트 데이터 저장은 용도에 맞게 ``localStorage``, ``sessionStorage``에 저장해야 합니다.\n\n쿠키의 크기가 1KB, 화면 하나에 HTTP 요청이 10개, 서버에 사용자가 동시에 100명이 동시에 접속한다고 가정하면 서버에 1MB의 불필요한 트래픽이 발생하게 됩니다.\n동시접속 사용자가 적을 경우는 괜찮지만 서비스가 성장하게 되면 반드시 성능상 문제가 발생하게 됩니다.\n\n## 쿠키 상세 정보\n{% asset_img 'dev-tools-cookie.png' '크롬 개발자 도구 Application 탭' %}\n1. Name\n  * 쿠키 이름(키))\n1. Value\n  * 쿠키 값\n1. Domain\n  * 쿠키가 적용될 도메인 정보\n  * 브라우저는 도메인 정보가 같은 쿠키만 요청 헤더에 ``Cookie`` 필드를 자동으로 추가 합니다.\n1. Path\n  * 쿠키를 경로를 지정해서 마치 폴더와 같이 관리할 수 있습니다.\n1. Expires\n  * ``Expires``에 명시된 날짜에 쿠키가 만료(삭제)됩니다.\n  * ``Expires``, ``Max-Age``가 명시되지 않은 경우 세션 쿠키입니다. 브라우저가 종료되면 해당 쿠키는 삭제됩니다. 하지만 요즘 브라우저들은 종료되었다가 다시 시작되어도 [이전 세션을 복원하는 기능]((https://support.mozilla.org/ko/kb/restore-previous-session#w_eieo-hiuayi-ykiiaooe-hlou)이 있어서 세션이 계속 유지되는 경우가 많습니다.\n1. HttpOnly\n  * ``HttpOnly`` 필드가 선언되면 스크립트에서는 해당 쿠키에 접근할 수 없습니다. 하지만 브라우저가 아닌 다른 클라이언트(ex. 크롤러)에서 접근하면 해당 정보를 취득할 수 있습니다.\n1. Secure\n  * ``Secure`` 필드가 선언되면 해당 쿠키는 HTTPS(SSL) 프로토콜을 사용한 경우에만 전송이 됩니다. 하지만 그렇다고 하더라도 절대로 민감한 정보를 담아서는 안됩니다.\n좀 더 상세한 내용은 MDN에서 한글로 번역된 [상세한 문서](https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies)를 참고해 주세요.\n\n## 쿠키를 이용한 세션관리\n웹에서는 쿠키를 이용해서 세션을 관리하게 됩니다.\n쿠키를 이용한 세션관리는 다음 편에서 별도로 설명하겠습니다.\n\n## 관련자료\n[MDN HTTP 쿠키](https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies)\n[MDN Set-Cookie](https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Set-Cookie)\n[RFC-6265](https://tools.ietf.org/html/rfc6265#section-4.1)\n[브라우저 세션 복원](https://support.mozilla.org/ko/kb/restore-previous-session#w_eieo-hiuayi-ykiiaooe-hlou)\n","slug":"how-cookie-works","published":1,"updated":"2017-09-23T01:44:05.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7wnldar000033yolv6hxmb8","content":"<h1 id=\"How-Cookie-Works\"><a href=\"#How-Cookie-Works\" class=\"headerlink\" title=\"How Cookie Works\"></a>How Cookie Works</h1><h2 id=\"Cookie란\"><a href=\"#Cookie란\" class=\"headerlink\" title=\"Cookie란?\"></a>Cookie란?</h2><p>HTTP는 기본적으로 <a href=\"https://ko.wikipedia.org/wiki/무상태_프로토콜\" target=\"_blank\" rel=\"external\">무상태 프로토콜</a>입니다.<br>HTTP 서버가 클라이언트에 대한 상태를 가지고 있지 않기 때문에 각각의 요청을 이전 요청과 무관한 독립적인 트랜잭션으로 취급하게 됩니다.<br>하지만 그렇게 되면 세션과 개인화(회원별 서비스)등을 관리할 수 없게 되기 때문에 Cookie(이하 쿠키)를 사용하게 됩니다.</p>\n<p>HTTP의 쿠키는 마치 헨젤과 그레텔의 쿠키(<del>돌맹이나 빵 버전도 있습니다.</del>)와 같습니다.<br>헨젤과 그레텔은 자신들이 돌아갈 길을 잊지 않기 위해서 사용하지만 HTTP의 쿠키는 HTTP 요청을 보내는 클라이언트를 식별하기 위해서 사용합니다.<br><img src=\"/2017/09/23/how-cookie-works/breadcrumbs.jpg\" alt=\"헨젤과 그레텔의 쿠키\" title=\"헨젤과 그레텔의 쿠키\"></p>\n<h2 id=\"HTTP-메시지\"><a href=\"#HTTP-메시지\" class=\"headerlink\" title=\"HTTP 메시지\"></a>HTTP 메시지</h2><p><strong><strong><em>[주의] 아래 설명은 웹 브라우저를 기반으로 설명한 내용입니다. 서버나 앱, 크롤러 등 다른 클라이언트에서 HTTP를 호출하는 경우 설정에 따라 다르게 동작합니다.</em></strong></strong><br><img src=\"/2017/09/23/how-cookie-works/http-req-res.png\" alt=\"쿠키 생성 과정\" title=\"쿠키 생성 과정\"></p>\n<ol>\n<li>최초 HTTP 요청<ul>\n<li>웹브라우저에서 처음 방문하는 웹사이트에 요청을 보냅니다.</li>\n</ul>\n</li>\n<li>세션 ID 발급<ul>\n<li><code>Set-Cookie:s_u_k=2ecf65a9-3678-497c-a620-640a88cabb44; Expires=Fri, 20-Oct-2017 15:24:31 GMT; Path=/</code></li>\n<li><code>Set-Cookie:SESSION=b5e3d1d6-bdcf-4d13-9502-9a9a654d35c1; Path=/; Secure; HttpOnly</code></li>\n<li><code>Set-Cookie</code> 필드에 대한 상세 정보는 <a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Set-Cookie\" target=\"_blank\" rel=\"external\">MDN 문서</a>를 참고해주세요.</li>\n<li><strong><strong><em>[주의] 모든 사이트가 항상 최초의 요청에 세션 ID를 발급하는 것은 아닙니다. 하지만 일반적으로 거의 모든 사이트가 사용자 추적을 위해서 최초 방문시 세션 ID를 발급하며 세션 ID 명이나 값 등의 상세 정책은 사이트마다 다를 수 있습니다.</em></strong></strong></li>\n</ul>\n</li>\n<li>모든 요청 헤더에 Cookie 포함<ul>\n<li><code>Cookie:s_u_k=2ecf65a9-3678-497c-a620-640a88cabb44; SESSION=b5e3d1d6-bdcf-4d13-9502-9a9a654d35c1</code></li>\n<li>이때 동일한 도메인으로 보내는 모든 요청에 쿠키가 포함되어 요청이 날아갑니다. HTML, CSS, JS, 이미지 등 모든 요청 헤더에 쿠키가 달라붙습니다. 아래 <a href=\"#주의하세요\">상세 내용</a>을 참고해 주세요.</li>\n</ul>\n</li>\n<li>응답 헤더에는 Cookie 미포함</li>\n</ol>\n<h2 id=\"주의하세요\"><a href=\"#주의하세요\" class=\"headerlink\" title=\"주의하세요~\"></a>주의하세요~</h2><p>예전에는 쿠키를 브라우저의 클라이언트 데이터 저장용으로 사용하는 경우도 있었지만 <code>localStorage</code>, <code>sessionStorage</code>(IE8 이상 지원)가 있는 이상 더 이상 쿠키를 데이터 베이스처럼 사용해서는 안됩니다.<br>쿠키는 크기 제한(브라우저 마다 다릅니다.)이 있으며 HTTP 요청을 주고 받을 때 마다 헤더를 통해서 전송이 되므로 성능상 낭비가 일어나게 됩니다.<br>IE8 이전의 시대에는 대안이 없었지만 현재는 IE8 미만의 브라우저는 거의 없으므로 클라이언트 데이터 저장은 용도에 맞게 <code>localStorage</code>, <code>sessionStorage</code>에 저장해야 합니다.</p>\n<p>쿠키의 크기가 1KB, 화면 하나에 HTTP 요청이 10개, 서버에 사용자가 동시에 100명이 동시에 접속한다고 가정하면 서버에 1MB의 불필요한 트래픽이 발생하게 됩니다.<br>동시접속 사용자가 적을 경우는 괜찮지만 서비스가 성장하게 되면 반드시 성능상 문제가 발생하게 됩니다.</p>\n<h2 id=\"쿠키-상세-정보\"><a href=\"#쿠키-상세-정보\" class=\"headerlink\" title=\"쿠키 상세 정보\"></a>쿠키 상세 정보</h2><img src=\"/2017/09/23/how-cookie-works/dev-tools-cookie.png\" alt=\"크롬 개발자 도구 Application 탭\" title=\"크롬 개발자 도구 Application 탭\">\n<ol>\n<li>Name<ul>\n<li>쿠키 이름(키))</li>\n</ul>\n</li>\n<li>Value<ul>\n<li>쿠키 값</li>\n</ul>\n</li>\n<li>Domain<ul>\n<li>쿠키가 적용될 도메인 정보</li>\n<li>브라우저는 도메인 정보가 같은 쿠키만 요청 헤더에 <code>Cookie</code> 필드를 자동으로 추가 합니다.</li>\n</ul>\n</li>\n<li>Path<ul>\n<li>쿠키를 경로를 지정해서 마치 폴더와 같이 관리할 수 있습니다.</li>\n</ul>\n</li>\n<li>Expires<ul>\n<li><code>Expires</code>에 명시된 날짜에 쿠키가 만료(삭제)됩니다.</li>\n<li><code>Expires</code>, <code>Max-Age</code>가 명시되지 않은 경우 세션 쿠키입니다. 브라우저가 종료되면 해당 쿠키는 삭제됩니다. 하지만 요즘 브라우저들은 종료되었다가 다시 시작되어도 <a href=\"(https://support.mozilla.org/ko/kb/restore-previous-session#w_eieo-hiuayi-ykiiaooe-hlou\">이전 세션을 복원하는 기능</a>이 있어서 세션이 계속 유지되는 경우가 많습니다.</li>\n</ul>\n</li>\n<li>HttpOnly<ul>\n<li><code>HttpOnly</code> 필드가 선언되면 스크립트에서는 해당 쿠키에 접근할 수 없습니다. 하지만 브라우저가 아닌 다른 클라이언트(ex. 크롤러)에서 접근하면 해당 정보를 취득할 수 있습니다.</li>\n</ul>\n</li>\n<li>Secure<ul>\n<li><code>Secure</code> 필드가 선언되면 해당 쿠키는 HTTPS(SSL) 프로토콜을 사용한 경우에만 전송이 됩니다. 하지만 그렇다고 하더라도 절대로 민감한 정보를 담아서는 안됩니다.<br>좀 더 상세한 내용은 MDN에서 한글로 번역된 <a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"external\">상세한 문서</a>를 참고해 주세요.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"쿠키를-이용한-세션관리\"><a href=\"#쿠키를-이용한-세션관리\" class=\"headerlink\" title=\"쿠키를 이용한 세션관리\"></a>쿠키를 이용한 세션관리</h2><p>웹에서는 쿠키를 이용해서 세션을 관리하게 됩니다.<br>쿠키를 이용한 세션관리는 다음 편에서 별도로 설명하겠습니다.</p>\n<h2 id=\"관련자료\"><a href=\"#관련자료\" class=\"headerlink\" title=\"관련자료\"></a>관련자료</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"external\">MDN HTTP 쿠키</a><br><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Set-Cookie\" target=\"_blank\" rel=\"external\">MDN Set-Cookie</a><br><a href=\"https://tools.ietf.org/html/rfc6265#section-4.1\" target=\"_blank\" rel=\"external\">RFC-6265</a><br><a href=\"https://support.mozilla.org/ko/kb/restore-previous-session#w_eieo-hiuayi-ykiiaooe-hlou\" target=\"_blank\" rel=\"external\">브라우저 세션 복원</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"How-Cookie-Works\"><a href=\"#How-Cookie-Works\" class=\"headerlink\" title=\"How Cookie Works\"></a>How Cookie Works</h1><h2 id=\"Cookie란\"><a href=\"#Cookie란\" class=\"headerlink\" title=\"Cookie란?\"></a>Cookie란?</h2><p>HTTP는 기본적으로 <a href=\"https://ko.wikipedia.org/wiki/무상태_프로토콜\" target=\"_blank\" rel=\"external\">무상태 프로토콜</a>입니다.<br>HTTP 서버가 클라이언트에 대한 상태를 가지고 있지 않기 때문에 각각의 요청을 이전 요청과 무관한 독립적인 트랜잭션으로 취급하게 됩니다.<br>하지만 그렇게 되면 세션과 개인화(회원별 서비스)등을 관리할 수 없게 되기 때문에 Cookie(이하 쿠키)를 사용하게 됩니다.</p>\n<p>HTTP의 쿠키는 마치 헨젤과 그레텔의 쿠키(<del>돌맹이나 빵 버전도 있습니다.</del>)와 같습니다.<br>헨젤과 그레텔은 자신들이 돌아갈 길을 잊지 않기 위해서 사용하지만 HTTP의 쿠키는 HTTP 요청을 보내는 클라이언트를 식별하기 위해서 사용합니다.<br><img src=\"/2017/09/23/how-cookie-works/breadcrumbs.jpg\" alt=\"헨젤과 그레텔의 쿠키\" title=\"헨젤과 그레텔의 쿠키\"></p>\n<h2 id=\"HTTP-메시지\"><a href=\"#HTTP-메시지\" class=\"headerlink\" title=\"HTTP 메시지\"></a>HTTP 메시지</h2><p><strong><strong><em>[주의] 아래 설명은 웹 브라우저를 기반으로 설명한 내용입니다. 서버나 앱, 크롤러 등 다른 클라이언트에서 HTTP를 호출하는 경우 설정에 따라 다르게 동작합니다.</em></strong></strong><br><img src=\"/2017/09/23/how-cookie-works/http-req-res.png\" alt=\"쿠키 생성 과정\" title=\"쿠키 생성 과정\"></p>\n<ol>\n<li>최초 HTTP 요청<ul>\n<li>웹브라우저에서 처음 방문하는 웹사이트에 요청을 보냅니다.</li>\n</ul>\n</li>\n<li>세션 ID 발급<ul>\n<li><code>Set-Cookie:s_u_k=2ecf65a9-3678-497c-a620-640a88cabb44; Expires=Fri, 20-Oct-2017 15:24:31 GMT; Path=/</code></li>\n<li><code>Set-Cookie:SESSION=b5e3d1d6-bdcf-4d13-9502-9a9a654d35c1; Path=/; Secure; HttpOnly</code></li>\n<li><code>Set-Cookie</code> 필드에 대한 상세 정보는 <a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Set-Cookie\" target=\"_blank\" rel=\"external\">MDN 문서</a>를 참고해주세요.</li>\n<li><strong><strong><em>[주의] 모든 사이트가 항상 최초의 요청에 세션 ID를 발급하는 것은 아닙니다. 하지만 일반적으로 거의 모든 사이트가 사용자 추적을 위해서 최초 방문시 세션 ID를 발급하며 세션 ID 명이나 값 등의 상세 정책은 사이트마다 다를 수 있습니다.</em></strong></strong></li>\n</ul>\n</li>\n<li>모든 요청 헤더에 Cookie 포함<ul>\n<li><code>Cookie:s_u_k=2ecf65a9-3678-497c-a620-640a88cabb44; SESSION=b5e3d1d6-bdcf-4d13-9502-9a9a654d35c1</code></li>\n<li>이때 동일한 도메인으로 보내는 모든 요청에 쿠키가 포함되어 요청이 날아갑니다. HTML, CSS, JS, 이미지 등 모든 요청 헤더에 쿠키가 달라붙습니다. 아래 <a href=\"#주의하세요\">상세 내용</a>을 참고해 주세요.</li>\n</ul>\n</li>\n<li>응답 헤더에는 Cookie 미포함</li>\n</ol>\n<h2 id=\"주의하세요\"><a href=\"#주의하세요\" class=\"headerlink\" title=\"주의하세요~\"></a>주의하세요~</h2><p>예전에는 쿠키를 브라우저의 클라이언트 데이터 저장용으로 사용하는 경우도 있었지만 <code>localStorage</code>, <code>sessionStorage</code>(IE8 이상 지원)가 있는 이상 더 이상 쿠키를 데이터 베이스처럼 사용해서는 안됩니다.<br>쿠키는 크기 제한(브라우저 마다 다릅니다.)이 있으며 HTTP 요청을 주고 받을 때 마다 헤더를 통해서 전송이 되므로 성능상 낭비가 일어나게 됩니다.<br>IE8 이전의 시대에는 대안이 없었지만 현재는 IE8 미만의 브라우저는 거의 없으므로 클라이언트 데이터 저장은 용도에 맞게 <code>localStorage</code>, <code>sessionStorage</code>에 저장해야 합니다.</p>\n<p>쿠키의 크기가 1KB, 화면 하나에 HTTP 요청이 10개, 서버에 사용자가 동시에 100명이 동시에 접속한다고 가정하면 서버에 1MB의 불필요한 트래픽이 발생하게 됩니다.<br>동시접속 사용자가 적을 경우는 괜찮지만 서비스가 성장하게 되면 반드시 성능상 문제가 발생하게 됩니다.</p>\n<h2 id=\"쿠키-상세-정보\"><a href=\"#쿠키-상세-정보\" class=\"headerlink\" title=\"쿠키 상세 정보\"></a>쿠키 상세 정보</h2><img src=\"/2017/09/23/how-cookie-works/dev-tools-cookie.png\" alt=\"크롬 개발자 도구 Application 탭\" title=\"크롬 개발자 도구 Application 탭\">\n<ol>\n<li>Name<ul>\n<li>쿠키 이름(키))</li>\n</ul>\n</li>\n<li>Value<ul>\n<li>쿠키 값</li>\n</ul>\n</li>\n<li>Domain<ul>\n<li>쿠키가 적용될 도메인 정보</li>\n<li>브라우저는 도메인 정보가 같은 쿠키만 요청 헤더에 <code>Cookie</code> 필드를 자동으로 추가 합니다.</li>\n</ul>\n</li>\n<li>Path<ul>\n<li>쿠키를 경로를 지정해서 마치 폴더와 같이 관리할 수 있습니다.</li>\n</ul>\n</li>\n<li>Expires<ul>\n<li><code>Expires</code>에 명시된 날짜에 쿠키가 만료(삭제)됩니다.</li>\n<li><code>Expires</code>, <code>Max-Age</code>가 명시되지 않은 경우 세션 쿠키입니다. 브라우저가 종료되면 해당 쿠키는 삭제됩니다. 하지만 요즘 브라우저들은 종료되었다가 다시 시작되어도 <a href=\"(https://support.mozilla.org/ko/kb/restore-previous-session#w_eieo-hiuayi-ykiiaooe-hlou\">이전 세션을 복원하는 기능</a>이 있어서 세션이 계속 유지되는 경우가 많습니다.</li>\n</ul>\n</li>\n<li>HttpOnly<ul>\n<li><code>HttpOnly</code> 필드가 선언되면 스크립트에서는 해당 쿠키에 접근할 수 없습니다. 하지만 브라우저가 아닌 다른 클라이언트(ex. 크롤러)에서 접근하면 해당 정보를 취득할 수 있습니다.</li>\n</ul>\n</li>\n<li>Secure<ul>\n<li><code>Secure</code> 필드가 선언되면 해당 쿠키는 HTTPS(SSL) 프로토콜을 사용한 경우에만 전송이 됩니다. 하지만 그렇다고 하더라도 절대로 민감한 정보를 담아서는 안됩니다.<br>좀 더 상세한 내용은 MDN에서 한글로 번역된 <a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"external\">상세한 문서</a>를 참고해 주세요.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"쿠키를-이용한-세션관리\"><a href=\"#쿠키를-이용한-세션관리\" class=\"headerlink\" title=\"쿠키를 이용한 세션관리\"></a>쿠키를 이용한 세션관리</h2><p>웹에서는 쿠키를 이용해서 세션을 관리하게 됩니다.<br>쿠키를 이용한 세션관리는 다음 편에서 별도로 설명하겠습니다.</p>\n<h2 id=\"관련자료\"><a href=\"#관련자료\" class=\"headerlink\" title=\"관련자료\"></a>관련자료</h2><p><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Cookies\" target=\"_blank\" rel=\"external\">MDN HTTP 쿠키</a><br><a href=\"https://developer.mozilla.org/ko/docs/Web/HTTP/Headers/Set-Cookie\" target=\"_blank\" rel=\"external\">MDN Set-Cookie</a><br><a href=\"https://tools.ietf.org/html/rfc6265#section-4.1\" target=\"_blank\" rel=\"external\">RFC-6265</a><br><a href=\"https://support.mozilla.org/ko/kb/restore-previous-session#w_eieo-hiuayi-ykiiaooe-hlou\" target=\"_blank\" rel=\"external\">브라우저 세션 복원</a></p>\n"},{"title":"server-network-perf","date":"2017-09-21T00:30:48.000Z","_content":"\n# 서버 네트워크 속도(대역폭) 측정하기\n\n{% asset_img 'highway-393492_1920.jpg' '우리는 항상 빠른 속도를 원한다.' %}\n\nAWS는 [EC2 인스턴스 타입](https://aws.amazon.com/ko/ec2/instance-types/)별 네트워크 속도(대역폭)에 대한 정확한 수치를 공개하고 있지 않습니다.\n아마도 자원을 공유하는 클라우드의 특성상 정확한 네트워크 속도를 보장하기 어렵기 때문이 아닌가 추측됩니다.\n\n어쨌든 우리도 서버의 대략적인 네트워크 대역폭을 알아야 실수 없이 서버를 구성할 수 있으니 한 번 측정을 해보도록 하겠습니다.\n측정 도구로는 [iperf](https://iperf.fr/)를 사용하도록 하겠습니다.\n\n## 준비물\n1. 클라이언트 PC 1대(간단하게 그냥 Macbook Pro와 일반 가정용 인터넷을 사용했습니다.)\n1. 서버(AWS EC2 t2.medium) 1대\n\n## iperf 설치하기\n1. 클라이언트\n  1. ``$ brew install iperf``\n1. 서버\n  1. ``$ sudo yum install iperf``\n\n## iperf 테스트하기\n1. 서버\n  1. ``$ iperf -s``\n  1. 옵션설명\n    * -s: iperf가 서버모드로 실행됩니다.\n1. 클라이언트\n  1. ``$ iperf -c ${SERVER_IP} -i 1 -t 10``\n  1. 옵션설명\n    * -c: 클라이언트 모드로 실행\n    * ${SERVER_IP}: 테스트할 서버의 IP\n    * -i 1: 반복 시간 간격(초단위)\n    * -t: 테스트할 시간(초단위)\n\n### 서버로그\n```\n$ iperf -s\n------------------------------------------------------------\nServer listening on TCP port 5001\nTCP window size: 85.3 KByte (default)\n------------------------------------------------------------\n[  4] local 172.31.25.62 port 5001 connected with 115.140.62.214 port 56015\n[ ID] Interval       Transfer     Bandwidth\n[  4]  0.0-10.1 sec  29.3 MBytes  24.2 Mbits/sec\n```\n\n### 클라이언트 로그\n```\n$ iperf -c ###.###.###.### -i 1 -t 10\n------------------------------------------------------------\nClient connecting to ###.###.###.###, TCP port 5001\nTCP window size:  129 KByte (default)\n------------------------------------------------------------\n[  4] local 192.168.219.121 port 61977 connected with ###.###.###.### port 5001\n[ ID] Interval       Transfer     Bandwidth\n[  4]  0.0- 1.0 sec  4.00 MBytes  33.6 Mbits/sec\n[  4]  1.0- 2.0 sec  3.38 MBytes  28.3 Mbits/sec\n[  4]  2.0- 3.0 sec  3.38 MBytes  28.3 Mbits/sec\n[  4]  3.0- 4.0 sec  3.50 MBytes  29.4 Mbits/sec\n[  4]  4.0- 5.0 sec  2.38 MBytes  19.9 Mbits/sec\n[  4]  5.0- 6.0 sec  4.12 MBytes  34.6 Mbits/sec\n[  4]  6.0- 7.0 sec  3.88 MBytes  32.5 Mbits/sec\n[  4]  7.0- 8.0 sec  4.12 MBytes  34.6 Mbits/sec\n[  4]  8.0- 9.0 sec  3.75 MBytes  31.5 Mbits/sec\n[  4]  9.0-10.0 sec  4.50 MBytes  37.7 Mbits/sec\n[  4]  0.0-10.0 sec  37.1 MBytes  31.1 Mbits/sec\n```\n\n## 테스트 결과 읽기\n1. ``Interval``: 호출한 시간 간격\n1. ``Transfer``: 전송한 데이터 사이즈\n1. ``Bandwidth``: 측정된 대역폭(주의: 단위가 Mbits 임. Mbits / 8 === MB)\n\n## 관련자료\nhttps://iperf.fr/\nhttps://aws.amazon.com/ko/ec2/instance-types/\n","source":"_posts/server-network-perf.md","raw":"---\ntitle: server-network-perf\ndate: 2017-09-21 09:30:48\ntags:\n---\n\n# 서버 네트워크 속도(대역폭) 측정하기\n\n{% asset_img 'highway-393492_1920.jpg' '우리는 항상 빠른 속도를 원한다.' %}\n\nAWS는 [EC2 인스턴스 타입](https://aws.amazon.com/ko/ec2/instance-types/)별 네트워크 속도(대역폭)에 대한 정확한 수치를 공개하고 있지 않습니다.\n아마도 자원을 공유하는 클라우드의 특성상 정확한 네트워크 속도를 보장하기 어렵기 때문이 아닌가 추측됩니다.\n\n어쨌든 우리도 서버의 대략적인 네트워크 대역폭을 알아야 실수 없이 서버를 구성할 수 있으니 한 번 측정을 해보도록 하겠습니다.\n측정 도구로는 [iperf](https://iperf.fr/)를 사용하도록 하겠습니다.\n\n## 준비물\n1. 클라이언트 PC 1대(간단하게 그냥 Macbook Pro와 일반 가정용 인터넷을 사용했습니다.)\n1. 서버(AWS EC2 t2.medium) 1대\n\n## iperf 설치하기\n1. 클라이언트\n  1. ``$ brew install iperf``\n1. 서버\n  1. ``$ sudo yum install iperf``\n\n## iperf 테스트하기\n1. 서버\n  1. ``$ iperf -s``\n  1. 옵션설명\n    * -s: iperf가 서버모드로 실행됩니다.\n1. 클라이언트\n  1. ``$ iperf -c ${SERVER_IP} -i 1 -t 10``\n  1. 옵션설명\n    * -c: 클라이언트 모드로 실행\n    * ${SERVER_IP}: 테스트할 서버의 IP\n    * -i 1: 반복 시간 간격(초단위)\n    * -t: 테스트할 시간(초단위)\n\n### 서버로그\n```\n$ iperf -s\n------------------------------------------------------------\nServer listening on TCP port 5001\nTCP window size: 85.3 KByte (default)\n------------------------------------------------------------\n[  4] local 172.31.25.62 port 5001 connected with 115.140.62.214 port 56015\n[ ID] Interval       Transfer     Bandwidth\n[  4]  0.0-10.1 sec  29.3 MBytes  24.2 Mbits/sec\n```\n\n### 클라이언트 로그\n```\n$ iperf -c ###.###.###.### -i 1 -t 10\n------------------------------------------------------------\nClient connecting to ###.###.###.###, TCP port 5001\nTCP window size:  129 KByte (default)\n------------------------------------------------------------\n[  4] local 192.168.219.121 port 61977 connected with ###.###.###.### port 5001\n[ ID] Interval       Transfer     Bandwidth\n[  4]  0.0- 1.0 sec  4.00 MBytes  33.6 Mbits/sec\n[  4]  1.0- 2.0 sec  3.38 MBytes  28.3 Mbits/sec\n[  4]  2.0- 3.0 sec  3.38 MBytes  28.3 Mbits/sec\n[  4]  3.0- 4.0 sec  3.50 MBytes  29.4 Mbits/sec\n[  4]  4.0- 5.0 sec  2.38 MBytes  19.9 Mbits/sec\n[  4]  5.0- 6.0 sec  4.12 MBytes  34.6 Mbits/sec\n[  4]  6.0- 7.0 sec  3.88 MBytes  32.5 Mbits/sec\n[  4]  7.0- 8.0 sec  4.12 MBytes  34.6 Mbits/sec\n[  4]  8.0- 9.0 sec  3.75 MBytes  31.5 Mbits/sec\n[  4]  9.0-10.0 sec  4.50 MBytes  37.7 Mbits/sec\n[  4]  0.0-10.0 sec  37.1 MBytes  31.1 Mbits/sec\n```\n\n## 테스트 결과 읽기\n1. ``Interval``: 호출한 시간 간격\n1. ``Transfer``: 전송한 데이터 사이즈\n1. ``Bandwidth``: 측정된 대역폭(주의: 단위가 Mbits 임. Mbits / 8 === MB)\n\n## 관련자료\nhttps://iperf.fr/\nhttps://aws.amazon.com/ko/ec2/instance-types/\n","slug":"server-network-perf","published":1,"updated":"2017-09-21T00:54:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7wnldaw000133yozt4hngem","content":"<h1 id=\"서버-네트워크-속도-대역폭-측정하기\"><a href=\"#서버-네트워크-속도-대역폭-측정하기\" class=\"headerlink\" title=\"서버 네트워크 속도(대역폭) 측정하기\"></a>서버 네트워크 속도(대역폭) 측정하기</h1><img src=\"/2017/09/21/server-network-perf/highway-393492_1920.jpg\" alt=\"우리는 항상 빠른 속도를 원한다.\" title=\"우리는 항상 빠른 속도를 원한다.\">\n<p>AWS는 <a href=\"https://aws.amazon.com/ko/ec2/instance-types/\" target=\"_blank\" rel=\"external\">EC2 인스턴스 타입</a>별 네트워크 속도(대역폭)에 대한 정확한 수치를 공개하고 있지 않습니다.<br>아마도 자원을 공유하는 클라우드의 특성상 정확한 네트워크 속도를 보장하기 어렵기 때문이 아닌가 추측됩니다.</p>\n<p>어쨌든 우리도 서버의 대략적인 네트워크 대역폭을 알아야 실수 없이 서버를 구성할 수 있으니 한 번 측정을 해보도록 하겠습니다.<br>측정 도구로는 <a href=\"https://iperf.fr/\" target=\"_blank\" rel=\"external\">iperf</a>를 사용하도록 하겠습니다.</p>\n<h2 id=\"준비물\"><a href=\"#준비물\" class=\"headerlink\" title=\"준비물\"></a>준비물</h2><ol>\n<li>클라이언트 PC 1대(간단하게 그냥 Macbook Pro와 일반 가정용 인터넷을 사용했습니다.)</li>\n<li>서버(AWS EC2 t2.medium) 1대</li>\n</ol>\n<h2 id=\"iperf-설치하기\"><a href=\"#iperf-설치하기\" class=\"headerlink\" title=\"iperf 설치하기\"></a>iperf 설치하기</h2><ol>\n<li>클라이언트<ol>\n<li><code>$ brew install iperf</code></li>\n</ol>\n</li>\n<li>서버<ol>\n<li><code>$ sudo yum install iperf</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"iperf-테스트하기\"><a href=\"#iperf-테스트하기\" class=\"headerlink\" title=\"iperf 테스트하기\"></a>iperf 테스트하기</h2><ol>\n<li>서버<ol>\n<li><code>$ iperf -s</code></li>\n<li>옵션설명<ul>\n<li>-s: iperf가 서버모드로 실행됩니다.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>클라이언트<ol>\n<li><code>$ iperf -c ${SERVER_IP} -i 1 -t 10</code></li>\n<li>옵션설명<ul>\n<li>-c: 클라이언트 모드로 실행</li>\n<li>${SERVER_IP}: 테스트할 서버의 IP</li>\n<li>-i 1: 반복 시간 간격(초단위)</li>\n<li>-t: 테스트할 시간(초단위)</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"서버로그\"><a href=\"#서버로그\" class=\"headerlink\" title=\"서버로그\"></a>서버로그</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ iperf -s</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">Server listening on TCP port 5001</div><div class=\"line\">TCP window size: 85.3 KByte (default)</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">[  4] local 172.31.25.62 port 5001 connected with 115.140.62.214 port 56015</div><div class=\"line\">[ ID] Interval       Transfer     Bandwidth</div><div class=\"line\">[  4]  0.0-10.1 sec  29.3 MBytes  24.2 Mbits/sec</div></pre></td></tr></table></figure>\n<h3 id=\"클라이언트-로그\"><a href=\"#클라이언트-로그\" class=\"headerlink\" title=\"클라이언트 로그\"></a>클라이언트 로그</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ iperf -c ###.###.###.### -i 1 -t 10</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">Client connecting to ###.###.###.###, TCP port 5001</div><div class=\"line\">TCP window size:  129 KByte (default)</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">[  4] local 192.168.219.121 port 61977 connected with ###.###.###.### port 5001</div><div class=\"line\">[ ID] Interval       Transfer     Bandwidth</div><div class=\"line\">[  4]  0.0- 1.0 sec  4.00 MBytes  33.6 Mbits/sec</div><div class=\"line\">[  4]  1.0- 2.0 sec  3.38 MBytes  28.3 Mbits/sec</div><div class=\"line\">[  4]  2.0- 3.0 sec  3.38 MBytes  28.3 Mbits/sec</div><div class=\"line\">[  4]  3.0- 4.0 sec  3.50 MBytes  29.4 Mbits/sec</div><div class=\"line\">[  4]  4.0- 5.0 sec  2.38 MBytes  19.9 Mbits/sec</div><div class=\"line\">[  4]  5.0- 6.0 sec  4.12 MBytes  34.6 Mbits/sec</div><div class=\"line\">[  4]  6.0- 7.0 sec  3.88 MBytes  32.5 Mbits/sec</div><div class=\"line\">[  4]  7.0- 8.0 sec  4.12 MBytes  34.6 Mbits/sec</div><div class=\"line\">[  4]  8.0- 9.0 sec  3.75 MBytes  31.5 Mbits/sec</div><div class=\"line\">[  4]  9.0-10.0 sec  4.50 MBytes  37.7 Mbits/sec</div><div class=\"line\">[  4]  0.0-10.0 sec  37.1 MBytes  31.1 Mbits/sec</div></pre></td></tr></table></figure>\n<h2 id=\"테스트-결과-읽기\"><a href=\"#테스트-결과-읽기\" class=\"headerlink\" title=\"테스트 결과 읽기\"></a>테스트 결과 읽기</h2><ol>\n<li><code>Interval</code>: 호출한 시간 간격</li>\n<li><code>Transfer</code>: 전송한 데이터 사이즈</li>\n<li><code>Bandwidth</code>: 측정된 대역폭(주의: 단위가 Mbits 임. Mbits / 8 === MB)</li>\n</ol>\n<h2 id=\"관련자료\"><a href=\"#관련자료\" class=\"headerlink\" title=\"관련자료\"></a>관련자료</h2><p><a href=\"https://iperf.fr/\" target=\"_blank\" rel=\"external\">https://iperf.fr/</a><br><a href=\"https://aws.amazon.com/ko/ec2/instance-types/\" target=\"_blank\" rel=\"external\">https://aws.amazon.com/ko/ec2/instance-types/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"서버-네트워크-속도-대역폭-측정하기\"><a href=\"#서버-네트워크-속도-대역폭-측정하기\" class=\"headerlink\" title=\"서버 네트워크 속도(대역폭) 측정하기\"></a>서버 네트워크 속도(대역폭) 측정하기</h1><img src=\"/2017/09/21/server-network-perf/highway-393492_1920.jpg\" alt=\"우리는 항상 빠른 속도를 원한다.\" title=\"우리는 항상 빠른 속도를 원한다.\">\n<p>AWS는 <a href=\"https://aws.amazon.com/ko/ec2/instance-types/\" target=\"_blank\" rel=\"external\">EC2 인스턴스 타입</a>별 네트워크 속도(대역폭)에 대한 정확한 수치를 공개하고 있지 않습니다.<br>아마도 자원을 공유하는 클라우드의 특성상 정확한 네트워크 속도를 보장하기 어렵기 때문이 아닌가 추측됩니다.</p>\n<p>어쨌든 우리도 서버의 대략적인 네트워크 대역폭을 알아야 실수 없이 서버를 구성할 수 있으니 한 번 측정을 해보도록 하겠습니다.<br>측정 도구로는 <a href=\"https://iperf.fr/\" target=\"_blank\" rel=\"external\">iperf</a>를 사용하도록 하겠습니다.</p>\n<h2 id=\"준비물\"><a href=\"#준비물\" class=\"headerlink\" title=\"준비물\"></a>준비물</h2><ol>\n<li>클라이언트 PC 1대(간단하게 그냥 Macbook Pro와 일반 가정용 인터넷을 사용했습니다.)</li>\n<li>서버(AWS EC2 t2.medium) 1대</li>\n</ol>\n<h2 id=\"iperf-설치하기\"><a href=\"#iperf-설치하기\" class=\"headerlink\" title=\"iperf 설치하기\"></a>iperf 설치하기</h2><ol>\n<li>클라이언트<ol>\n<li><code>$ brew install iperf</code></li>\n</ol>\n</li>\n<li>서버<ol>\n<li><code>$ sudo yum install iperf</code></li>\n</ol>\n</li>\n</ol>\n<h2 id=\"iperf-테스트하기\"><a href=\"#iperf-테스트하기\" class=\"headerlink\" title=\"iperf 테스트하기\"></a>iperf 테스트하기</h2><ol>\n<li>서버<ol>\n<li><code>$ iperf -s</code></li>\n<li>옵션설명<ul>\n<li>-s: iperf가 서버모드로 실행됩니다.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>클라이언트<ol>\n<li><code>$ iperf -c ${SERVER_IP} -i 1 -t 10</code></li>\n<li>옵션설명<ul>\n<li>-c: 클라이언트 모드로 실행</li>\n<li>${SERVER_IP}: 테스트할 서버의 IP</li>\n<li>-i 1: 반복 시간 간격(초단위)</li>\n<li>-t: 테스트할 시간(초단위)</li>\n</ul>\n</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"서버로그\"><a href=\"#서버로그\" class=\"headerlink\" title=\"서버로그\"></a>서버로그</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ iperf -s</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">Server listening on TCP port 5001</div><div class=\"line\">TCP window size: 85.3 KByte (default)</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">[  4] local 172.31.25.62 port 5001 connected with 115.140.62.214 port 56015</div><div class=\"line\">[ ID] Interval       Transfer     Bandwidth</div><div class=\"line\">[  4]  0.0-10.1 sec  29.3 MBytes  24.2 Mbits/sec</div></pre></td></tr></table></figure>\n<h3 id=\"클라이언트-로그\"><a href=\"#클라이언트-로그\" class=\"headerlink\" title=\"클라이언트 로그\"></a>클라이언트 로그</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ iperf -c ###.###.###.### -i 1 -t 10</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">Client connecting to ###.###.###.###, TCP port 5001</div><div class=\"line\">TCP window size:  129 KByte (default)</div><div class=\"line\">------------------------------------------------------------</div><div class=\"line\">[  4] local 192.168.219.121 port 61977 connected with ###.###.###.### port 5001</div><div class=\"line\">[ ID] Interval       Transfer     Bandwidth</div><div class=\"line\">[  4]  0.0- 1.0 sec  4.00 MBytes  33.6 Mbits/sec</div><div class=\"line\">[  4]  1.0- 2.0 sec  3.38 MBytes  28.3 Mbits/sec</div><div class=\"line\">[  4]  2.0- 3.0 sec  3.38 MBytes  28.3 Mbits/sec</div><div class=\"line\">[  4]  3.0- 4.0 sec  3.50 MBytes  29.4 Mbits/sec</div><div class=\"line\">[  4]  4.0- 5.0 sec  2.38 MBytes  19.9 Mbits/sec</div><div class=\"line\">[  4]  5.0- 6.0 sec  4.12 MBytes  34.6 Mbits/sec</div><div class=\"line\">[  4]  6.0- 7.0 sec  3.88 MBytes  32.5 Mbits/sec</div><div class=\"line\">[  4]  7.0- 8.0 sec  4.12 MBytes  34.6 Mbits/sec</div><div class=\"line\">[  4]  8.0- 9.0 sec  3.75 MBytes  31.5 Mbits/sec</div><div class=\"line\">[  4]  9.0-10.0 sec  4.50 MBytes  37.7 Mbits/sec</div><div class=\"line\">[  4]  0.0-10.0 sec  37.1 MBytes  31.1 Mbits/sec</div></pre></td></tr></table></figure>\n<h2 id=\"테스트-결과-읽기\"><a href=\"#테스트-결과-읽기\" class=\"headerlink\" title=\"테스트 결과 읽기\"></a>테스트 결과 읽기</h2><ol>\n<li><code>Interval</code>: 호출한 시간 간격</li>\n<li><code>Transfer</code>: 전송한 데이터 사이즈</li>\n<li><code>Bandwidth</code>: 측정된 대역폭(주의: 단위가 Mbits 임. Mbits / 8 === MB)</li>\n</ol>\n<h2 id=\"관련자료\"><a href=\"#관련자료\" class=\"headerlink\" title=\"관련자료\"></a>관련자료</h2><p><a href=\"https://iperf.fr/\" target=\"_blank\" rel=\"external\">https://iperf.fr/</a><br><a href=\"https://aws.amazon.com/ko/ec2/instance-types/\" target=\"_blank\" rel=\"external\">https://aws.amazon.com/ko/ec2/instance-types/</a></p>\n"},{"title":"ts-ios-wifi-webkit-error","date":"2017-08-24T10:17:22.000Z","_content":"\n# [Trouble Shooting] iOS WiFi parse error\n\n## 증상\n1. iOS 사파리에서 [가자고](https://www.thegajago.com) 사이트를 열면 ``오류: WebKit에 내부 오류 발생``이라고 보여진다.\n  - {% asset_img 'webkit-error.png' '우리는 항상 빠른 속도를 원한다.' %}\n2. 사이트의 반응이 매우 느리며 불특정 페이지에서 발생한다.\n3. WiFi 연결일때만 발생하며 LTE 연결인 경우 오류가 발생하지 않는다.\n4. iOS 10.2 버전 업데이트 이후부터 발생된다.\n\n\n## 원인\n1. iOS WiFi 연결상태에서 gzip decoding에 뭔가 문제가 있는것 같다.\n  - 사실 정확한 원인 및 문서를 찾지 못했다.\n\n\n## 해결책\n1. gzip 옵션을 off 한다.\n```conf\n...\n    gzip on; // -> off\n    gzip_types text/plain application/xml text/css text/js text/xml application/x-javascript text/javascript application/json appplication/xml+rss;\n    gzip_http_version 1.1;\n    gzip_disable \"MSIE [1-6] \\.\";\n    gzip_vary on;\n...\n```\n\n\n## 남아있는 과제\n1. nginx gzip 모듈 버전을 업데이트하면 괜찮지 않을까?\n2. gzip을 iOS에서만 off 하도록 gzip_disable 값을 셋팅하자.\n\n## 관련자료\n- 없음","source":"_posts/ts-ios-wifi-webkit-error.md","raw":"---\ntitle: ts-ios-wifi-webkit-error\ndate: 2017-08-24 19:17:22\ntags:\n---\n\n# [Trouble Shooting] iOS WiFi parse error\n\n## 증상\n1. iOS 사파리에서 [가자고](https://www.thegajago.com) 사이트를 열면 ``오류: WebKit에 내부 오류 발생``이라고 보여진다.\n  - {% asset_img 'webkit-error.png' '우리는 항상 빠른 속도를 원한다.' %}\n2. 사이트의 반응이 매우 느리며 불특정 페이지에서 발생한다.\n3. WiFi 연결일때만 발생하며 LTE 연결인 경우 오류가 발생하지 않는다.\n4. iOS 10.2 버전 업데이트 이후부터 발생된다.\n\n\n## 원인\n1. iOS WiFi 연결상태에서 gzip decoding에 뭔가 문제가 있는것 같다.\n  - 사실 정확한 원인 및 문서를 찾지 못했다.\n\n\n## 해결책\n1. gzip 옵션을 off 한다.\n```conf\n...\n    gzip on; // -> off\n    gzip_types text/plain application/xml text/css text/js text/xml application/x-javascript text/javascript application/json appplication/xml+rss;\n    gzip_http_version 1.1;\n    gzip_disable \"MSIE [1-6] \\.\";\n    gzip_vary on;\n...\n```\n\n\n## 남아있는 과제\n1. nginx gzip 모듈 버전을 업데이트하면 괜찮지 않을까?\n2. gzip을 iOS에서만 off 하도록 gzip_disable 값을 셋팅하자.\n\n## 관련자료\n- 없음","slug":"ts-ios-wifi-webkit-error","published":1,"updated":"2017-09-21T01:34:52.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7wnldaz000233yodod8n80g","content":"<h1 id=\"Trouble-Shooting-iOS-WiFi-parse-error\"><a href=\"#Trouble-Shooting-iOS-WiFi-parse-error\" class=\"headerlink\" title=\"[Trouble Shooting] iOS WiFi parse error\"></a>[Trouble Shooting] iOS WiFi parse error</h1><h2 id=\"증상\"><a href=\"#증상\" class=\"headerlink\" title=\"증상\"></a>증상</h2><ol>\n<li>iOS 사파리에서 <a href=\"https://www.thegajago.com\" target=\"_blank\" rel=\"external\">가자고</a> 사이트를 열면 <code>오류: WebKit에 내부 오류 발생</code>이라고 보여진다.<ul>\n<li><img src=\"/2017/08/24/ts-ios-wifi-webkit-error/webkit-error.png\" alt=\"우리는 항상 빠른 속도를 원한다.\" title=\"우리는 항상 빠른 속도를 원한다.\"></li>\n</ul>\n</li>\n<li>사이트의 반응이 매우 느리며 불특정 페이지에서 발생한다.</li>\n<li>WiFi 연결일때만 발생하며 LTE 연결인 경우 오류가 발생하지 않는다.</li>\n<li>iOS 10.2 버전 업데이트 이후부터 발생된다.</li>\n</ol>\n<h2 id=\"원인\"><a href=\"#원인\" class=\"headerlink\" title=\"원인\"></a>원인</h2><ol>\n<li>iOS WiFi 연결상태에서 gzip decoding에 뭔가 문제가 있는것 같다.<ul>\n<li>사실 정확한 원인 및 문서를 찾지 못했다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"해결책\"><a href=\"#해결책\" class=\"headerlink\" title=\"해결책\"></a>해결책</h2><ol>\n<li>gzip 옵션을 off 한다.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">    gzip on; // -&gt; off</div><div class=\"line\">    gzip_types text/plain application/xml text/css text/js text/xml application/x-javascript text/javascript application/json appplication/xml+rss;</div><div class=\"line\">    gzip_http_version 1.1;</div><div class=\"line\">    gzip_disable &quot;MSIE [1-6] \\.&quot;;</div><div class=\"line\">    gzip_vary on;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"남아있는-과제\"><a href=\"#남아있는-과제\" class=\"headerlink\" title=\"남아있는 과제\"></a>남아있는 과제</h2><ol>\n<li>nginx gzip 모듈 버전을 업데이트하면 괜찮지 않을까?</li>\n<li>gzip을 iOS에서만 off 하도록 gzip_disable 값을 셋팅하자.</li>\n</ol>\n<h2 id=\"관련자료\"><a href=\"#관련자료\" class=\"headerlink\" title=\"관련자료\"></a>관련자료</h2><ul>\n<li>없음</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Trouble-Shooting-iOS-WiFi-parse-error\"><a href=\"#Trouble-Shooting-iOS-WiFi-parse-error\" class=\"headerlink\" title=\"[Trouble Shooting] iOS WiFi parse error\"></a>[Trouble Shooting] iOS WiFi parse error</h1><h2 id=\"증상\"><a href=\"#증상\" class=\"headerlink\" title=\"증상\"></a>증상</h2><ol>\n<li>iOS 사파리에서 <a href=\"https://www.thegajago.com\" target=\"_blank\" rel=\"external\">가자고</a> 사이트를 열면 <code>오류: WebKit에 내부 오류 발생</code>이라고 보여진다.<ul>\n<li><img src=\"/2017/08/24/ts-ios-wifi-webkit-error/webkit-error.png\" alt=\"우리는 항상 빠른 속도를 원한다.\" title=\"우리는 항상 빠른 속도를 원한다.\"></li>\n</ul>\n</li>\n<li>사이트의 반응이 매우 느리며 불특정 페이지에서 발생한다.</li>\n<li>WiFi 연결일때만 발생하며 LTE 연결인 경우 오류가 발생하지 않는다.</li>\n<li>iOS 10.2 버전 업데이트 이후부터 발생된다.</li>\n</ol>\n<h2 id=\"원인\"><a href=\"#원인\" class=\"headerlink\" title=\"원인\"></a>원인</h2><ol>\n<li>iOS WiFi 연결상태에서 gzip decoding에 뭔가 문제가 있는것 같다.<ul>\n<li>사실 정확한 원인 및 문서를 찾지 못했다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"해결책\"><a href=\"#해결책\" class=\"headerlink\" title=\"해결책\"></a>해결책</h2><ol>\n<li>gzip 옵션을 off 한다.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">...</div><div class=\"line\">    gzip on; // -&gt; off</div><div class=\"line\">    gzip_types text/plain application/xml text/css text/js text/xml application/x-javascript text/javascript application/json appplication/xml+rss;</div><div class=\"line\">    gzip_http_version 1.1;</div><div class=\"line\">    gzip_disable &quot;MSIE [1-6] \\.&quot;;</div><div class=\"line\">    gzip_vary on;</div><div class=\"line\">...</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"남아있는-과제\"><a href=\"#남아있는-과제\" class=\"headerlink\" title=\"남아있는 과제\"></a>남아있는 과제</h2><ol>\n<li>nginx gzip 모듈 버전을 업데이트하면 괜찮지 않을까?</li>\n<li>gzip을 iOS에서만 off 하도록 gzip_disable 값을 셋팅하자.</li>\n</ol>\n<h2 id=\"관련자료\"><a href=\"#관련자료\" class=\"headerlink\" title=\"관련자료\"></a>관련자료</h2><ul>\n<li>없음</li>\n</ul>\n"},{"title":"ts-spring-session-oome","date":"2017-08-24T07:20:28.000Z","_content":"\n# [Trouble Shooting] spring-session OOME\n\n## 증상\n1. 2번 서버가 OutOfMemoryError로 갑자기 죽어버렸음\n2. KT 로드밸런서가 2번 서버로 계속 요청을 보냄\n3. 사용자의 요청이 1번 서버로만 간 경우 정상적으로 서비스를 이용\n4. 사용자의 요청이 2번으로 하나라도 가면 API의 응답을 받지 못함\n\n```log\n2017-08-04 19:40:51 [gajago-front] [redisMessageListenerContainer-1] ERROR org.springframework.data.redis.listener.RedisMessageListenerContainer:handleSubscriptionException:648 - SubscriptionTask aborted with exception:\njava.lang.OutOfMemoryError: unable to create new native thread\n        at java.lang.Thread.start0(Native Method)\n        at java.lang.Thread.start(Thread.java:714)\n        at org.springframework.core.task.SimpleAsyncTaskExecutor.doExecute(SimpleAsyncTaskExecutor.java:213)\n        at org.springframework.core.task.SimpleAsyncTaskExecutor.execute(SimpleAsyncTaskExecutor.java:171)\n        at org.springframework.core.task.SimpleAsyncTaskExecutor.execute(SimpleAsyncTaskExecutor.java:151)\n        at org.springframework.data.redis.listener.RedisMessageListenerContainer.dispatchMessage(RedisMessageListenerContainer.java:958)\n        at org.springframework.data.redis.listener.RedisMessageListenerContainer.access$1400(RedisMessageListenerContainer.java:71)\n        at org.springframework.data.redis.listener.RedisMessageListenerContainer$DispatchMessageListener.onMessage(RedisMessageListenerContainer.java:949)\n        at org.springframework.data.redis.connection.jedis.JedisMessageListener.onPMessage(JedisMessageListener.java:43)\n        at redis.clients.jedis.BinaryJedisPubSub.process(BinaryJedisPubSub.java:109)\n        at redis.clients.jedis.BinaryJedisPubSub.proceedWithPatterns(BinaryJedisPubSub.java:75)\n        at redis.clients.jedis.BinaryJedis.psubscribe(BinaryJedis.java:2953)\n        at org.springframework.data.redis.connection.jedis.JedisConnection.pSubscribe(JedisConnection.java:2959)\n        at org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask.eventuallyPerformSubscription(RedisMessageListenerContainer.java:773)\n        at org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask.run(RedisMessageListenerContainer.java:740)\n        at java.lang.Thread.run(Thread.java:745)\nException in thread \"http-apr-10090-Acceptor-0\" java.lang.OutOfMemoryError: unable to create new native thread\n        at java.lang.Thread.start0(Native Method)\n        at java.lang.Thread.start(Thread.java:714)\n        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:950)\n        at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1368)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:161)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:141)\n        at org.apache.catalina.core.StandardThreadExecutor.execute(StandardThreadExecutor.java:169)\n        at org.apache.tomcat.util.net.AprEndpoint.processSocketWithOptions(AprEndpoint.java:909)\n        at org.apache.tomcat.util.net.AprEndpoint$Acceptor.run(AprEndpoint.java:1086)\n        at java.lang.Thread.run(Thread.java:745)\n```\n\n## 원인\n1. [spring-session](https://github.com/spring-projects/spring-session)에서 [spring-data-redis]를 사용할 때 [RedisMessageListenerContainer의 taskExecutor](https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/listener/RedisMessageListenerContainer.java#L97)에 별도의 값을 설정하지 않아서 [SimpleAsyncTaskExecutor](https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java)를 사용하고 있음\n2. [SimpleAsyncTaskExecutor 문서](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/SimpleAsyncTaskExecutor.html)에서 이 클래스는 쓰레드를 재사용하지 않으니 실행시간이 짧은 많은 수의 작업에는 사용하지 말라고 권장하고 있음\n    - ``NOTE: This implementation does not reuse threads! Consider a thread-pooling TaskExecutor implementation instead, in particular for executing a large number of short-lived tasks.``\n3. spring-session에서 세션정보에 접근하기 위해서 redis를 사용할 때 마다 Thread가 매번 생성됨\n4. 접속량이 많이지게 되면 ``OutOfMemoryError`` 발생\n\n## 해결책\n1. SimpleAsyncTaskExecutor 대신에 ThreadPool을 사용할 수 있도록 지정한다\n2. 하지만 지금 사용중인 ``spring-session-1.0.2.RELEASE`` 버전에서는 taskExecutor를 별도로 지정할 수 있는 방법이 없음\n3. 결국 ``spring-session-1.3.1.RELEASE`` 버전으로 업데이트\n4. [패치된 내용](https://github.com/tsachev/spring-session/commit/6604bf180221028aff47f999418c0d48db72fb92)을 바탕으로 ``springSessionRedisTaskExecutor``를 지정\n5. ``springSessionRedisTaskExecutor``를 지정하면 일어나는 일\n  1. ``springSessionRedisTaskExecutor``를 지정하면 ``RedisHttpSessionConfiguration.redisTaskExecutor``에 지정한 ``springSessionRedisTaskExecutor``가 할당 됨 [소스코드](https://github.com/spring-projects/spring-session/blob/master/spring-session-data-redis/src/main/java/org/springframework/session/data/redis/config/annotation/web/http/RedisHttpSessionConfiguration.java#L203)\n  2. ``RedisMessageListenerContainer.taskExecutor``에 ``RedisHttpSessionConfiguration.redisTaskExecutor``가 할당 됨 [소스코드](https://github.com/spring-projects/spring-session/blob/master/spring-session-data-redis/src/main/java/org/springframework/session/data/redis/config/annotation/web/http/RedisHttpSessionConfiguration.java#L93)\n  3. spring-session에서 redis를 사용할 때 ``springSessionRedisTaskExecutor``를 사용하게 됨 [소스코드](https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/listener/RedisMessageListenerContainer.java#L961)\n\n```java\n@Configuration\npublic class FrontSessionConfig {\n    @Bean\n    public Executor springSessionRedisTaskExecutor() {\n        ThreadFactory threadFactory = new ThreadFactory() {\n            private int threadCount = 0;\n\n            @Override\n            public Thread newThread(Runnable runnable) {\n                return new Thread(runnable, String.format(\"gajago-session-redis-%d\", ++threadCount));\n            }\n        };\n\n        return Executors.newCachedThreadPool(threadFactory);\n    }\n}\n```\n\n\n## 남아있는 과제\n1. 왜 1번 서버는 안 죽고 2번 서버만 죽었을까?\n2. KT 로드밸런서가 왜 2번 서버로 계속 요청을 보냈을까?\n3. 캐시로 사용하고 있는 redis의 taskExecutor는?\n\n## 관련자료\n* https://github.com/spring-projects/spring-session\n* https://github.com/tsachev/spring-session/commit/6604bf180221028aff47f999418c0d48db72fb92\n* https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java\n* https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/SimpleAsyncTaskExecutor.html\n","source":"_posts/ts-spring-session-oome.md","raw":"---\ntitle: ts-spring-session-oome\ndate: 2017-08-24 16:20:28\ntags:\n---\n\n# [Trouble Shooting] spring-session OOME\n\n## 증상\n1. 2번 서버가 OutOfMemoryError로 갑자기 죽어버렸음\n2. KT 로드밸런서가 2번 서버로 계속 요청을 보냄\n3. 사용자의 요청이 1번 서버로만 간 경우 정상적으로 서비스를 이용\n4. 사용자의 요청이 2번으로 하나라도 가면 API의 응답을 받지 못함\n\n```log\n2017-08-04 19:40:51 [gajago-front] [redisMessageListenerContainer-1] ERROR org.springframework.data.redis.listener.RedisMessageListenerContainer:handleSubscriptionException:648 - SubscriptionTask aborted with exception:\njava.lang.OutOfMemoryError: unable to create new native thread\n        at java.lang.Thread.start0(Native Method)\n        at java.lang.Thread.start(Thread.java:714)\n        at org.springframework.core.task.SimpleAsyncTaskExecutor.doExecute(SimpleAsyncTaskExecutor.java:213)\n        at org.springframework.core.task.SimpleAsyncTaskExecutor.execute(SimpleAsyncTaskExecutor.java:171)\n        at org.springframework.core.task.SimpleAsyncTaskExecutor.execute(SimpleAsyncTaskExecutor.java:151)\n        at org.springframework.data.redis.listener.RedisMessageListenerContainer.dispatchMessage(RedisMessageListenerContainer.java:958)\n        at org.springframework.data.redis.listener.RedisMessageListenerContainer.access$1400(RedisMessageListenerContainer.java:71)\n        at org.springframework.data.redis.listener.RedisMessageListenerContainer$DispatchMessageListener.onMessage(RedisMessageListenerContainer.java:949)\n        at org.springframework.data.redis.connection.jedis.JedisMessageListener.onPMessage(JedisMessageListener.java:43)\n        at redis.clients.jedis.BinaryJedisPubSub.process(BinaryJedisPubSub.java:109)\n        at redis.clients.jedis.BinaryJedisPubSub.proceedWithPatterns(BinaryJedisPubSub.java:75)\n        at redis.clients.jedis.BinaryJedis.psubscribe(BinaryJedis.java:2953)\n        at org.springframework.data.redis.connection.jedis.JedisConnection.pSubscribe(JedisConnection.java:2959)\n        at org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask.eventuallyPerformSubscription(RedisMessageListenerContainer.java:773)\n        at org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask.run(RedisMessageListenerContainer.java:740)\n        at java.lang.Thread.run(Thread.java:745)\nException in thread \"http-apr-10090-Acceptor-0\" java.lang.OutOfMemoryError: unable to create new native thread\n        at java.lang.Thread.start0(Native Method)\n        at java.lang.Thread.start(Thread.java:714)\n        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:950)\n        at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1368)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:161)\n        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:141)\n        at org.apache.catalina.core.StandardThreadExecutor.execute(StandardThreadExecutor.java:169)\n        at org.apache.tomcat.util.net.AprEndpoint.processSocketWithOptions(AprEndpoint.java:909)\n        at org.apache.tomcat.util.net.AprEndpoint$Acceptor.run(AprEndpoint.java:1086)\n        at java.lang.Thread.run(Thread.java:745)\n```\n\n## 원인\n1. [spring-session](https://github.com/spring-projects/spring-session)에서 [spring-data-redis]를 사용할 때 [RedisMessageListenerContainer의 taskExecutor](https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/listener/RedisMessageListenerContainer.java#L97)에 별도의 값을 설정하지 않아서 [SimpleAsyncTaskExecutor](https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java)를 사용하고 있음\n2. [SimpleAsyncTaskExecutor 문서](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/SimpleAsyncTaskExecutor.html)에서 이 클래스는 쓰레드를 재사용하지 않으니 실행시간이 짧은 많은 수의 작업에는 사용하지 말라고 권장하고 있음\n    - ``NOTE: This implementation does not reuse threads! Consider a thread-pooling TaskExecutor implementation instead, in particular for executing a large number of short-lived tasks.``\n3. spring-session에서 세션정보에 접근하기 위해서 redis를 사용할 때 마다 Thread가 매번 생성됨\n4. 접속량이 많이지게 되면 ``OutOfMemoryError`` 발생\n\n## 해결책\n1. SimpleAsyncTaskExecutor 대신에 ThreadPool을 사용할 수 있도록 지정한다\n2. 하지만 지금 사용중인 ``spring-session-1.0.2.RELEASE`` 버전에서는 taskExecutor를 별도로 지정할 수 있는 방법이 없음\n3. 결국 ``spring-session-1.3.1.RELEASE`` 버전으로 업데이트\n4. [패치된 내용](https://github.com/tsachev/spring-session/commit/6604bf180221028aff47f999418c0d48db72fb92)을 바탕으로 ``springSessionRedisTaskExecutor``를 지정\n5. ``springSessionRedisTaskExecutor``를 지정하면 일어나는 일\n  1. ``springSessionRedisTaskExecutor``를 지정하면 ``RedisHttpSessionConfiguration.redisTaskExecutor``에 지정한 ``springSessionRedisTaskExecutor``가 할당 됨 [소스코드](https://github.com/spring-projects/spring-session/blob/master/spring-session-data-redis/src/main/java/org/springframework/session/data/redis/config/annotation/web/http/RedisHttpSessionConfiguration.java#L203)\n  2. ``RedisMessageListenerContainer.taskExecutor``에 ``RedisHttpSessionConfiguration.redisTaskExecutor``가 할당 됨 [소스코드](https://github.com/spring-projects/spring-session/blob/master/spring-session-data-redis/src/main/java/org/springframework/session/data/redis/config/annotation/web/http/RedisHttpSessionConfiguration.java#L93)\n  3. spring-session에서 redis를 사용할 때 ``springSessionRedisTaskExecutor``를 사용하게 됨 [소스코드](https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/listener/RedisMessageListenerContainer.java#L961)\n\n```java\n@Configuration\npublic class FrontSessionConfig {\n    @Bean\n    public Executor springSessionRedisTaskExecutor() {\n        ThreadFactory threadFactory = new ThreadFactory() {\n            private int threadCount = 0;\n\n            @Override\n            public Thread newThread(Runnable runnable) {\n                return new Thread(runnable, String.format(\"gajago-session-redis-%d\", ++threadCount));\n            }\n        };\n\n        return Executors.newCachedThreadPool(threadFactory);\n    }\n}\n```\n\n\n## 남아있는 과제\n1. 왜 1번 서버는 안 죽고 2번 서버만 죽었을까?\n2. KT 로드밸런서가 왜 2번 서버로 계속 요청을 보냈을까?\n3. 캐시로 사용하고 있는 redis의 taskExecutor는?\n\n## 관련자료\n* https://github.com/spring-projects/spring-session\n* https://github.com/tsachev/spring-session/commit/6604bf180221028aff47f999418c0d48db72fb92\n* https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java\n* https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/SimpleAsyncTaskExecutor.html\n","slug":"ts-spring-session-oome","published":1,"updated":"2017-09-21T00:54:55.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj7wnldb1000333yo2u10nb96","content":"<h1 id=\"Trouble-Shooting-spring-session-OOME\"><a href=\"#Trouble-Shooting-spring-session-OOME\" class=\"headerlink\" title=\"[Trouble Shooting] spring-session OOME\"></a>[Trouble Shooting] spring-session OOME</h1><h2 id=\"증상\"><a href=\"#증상\" class=\"headerlink\" title=\"증상\"></a>증상</h2><ol>\n<li>2번 서버가 OutOfMemoryError로 갑자기 죽어버렸음</li>\n<li>KT 로드밸런서가 2번 서버로 계속 요청을 보냄</li>\n<li>사용자의 요청이 1번 서버로만 간 경우 정상적으로 서비스를 이용</li>\n<li>사용자의 요청이 2번으로 하나라도 가면 API의 응답을 받지 못함</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">2017-08-04 19:40:51 [gajago-front] [redisMessageListenerContainer-1] ERROR org.springframework.data.redis.listener.RedisMessageListenerContainer:handleSubscriptionException:648 - SubscriptionTask aborted with exception:</div><div class=\"line\">java.lang.OutOfMemoryError: unable to create new native thread</div><div class=\"line\">        at java.lang.Thread.start0(Native Method)</div><div class=\"line\">        at java.lang.Thread.start(Thread.java:714)</div><div class=\"line\">        at org.springframework.core.task.SimpleAsyncTaskExecutor.doExecute(SimpleAsyncTaskExecutor.java:213)</div><div class=\"line\">        at org.springframework.core.task.SimpleAsyncTaskExecutor.execute(SimpleAsyncTaskExecutor.java:171)</div><div class=\"line\">        at org.springframework.core.task.SimpleAsyncTaskExecutor.execute(SimpleAsyncTaskExecutor.java:151)</div><div class=\"line\">        at org.springframework.data.redis.listener.RedisMessageListenerContainer.dispatchMessage(RedisMessageListenerContainer.java:958)</div><div class=\"line\">        at org.springframework.data.redis.listener.RedisMessageListenerContainer.access$1400(RedisMessageListenerContainer.java:71)</div><div class=\"line\">        at org.springframework.data.redis.listener.RedisMessageListenerContainer$DispatchMessageListener.onMessage(RedisMessageListenerContainer.java:949)</div><div class=\"line\">        at org.springframework.data.redis.connection.jedis.JedisMessageListener.onPMessage(JedisMessageListener.java:43)</div><div class=\"line\">        at redis.clients.jedis.BinaryJedisPubSub.process(BinaryJedisPubSub.java:109)</div><div class=\"line\">        at redis.clients.jedis.BinaryJedisPubSub.proceedWithPatterns(BinaryJedisPubSub.java:75)</div><div class=\"line\">        at redis.clients.jedis.BinaryJedis.psubscribe(BinaryJedis.java:2953)</div><div class=\"line\">        at org.springframework.data.redis.connection.jedis.JedisConnection.pSubscribe(JedisConnection.java:2959)</div><div class=\"line\">        at org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask.eventuallyPerformSubscription(RedisMessageListenerContainer.java:773)</div><div class=\"line\">        at org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask.run(RedisMessageListenerContainer.java:740)</div><div class=\"line\">        at java.lang.Thread.run(Thread.java:745)</div><div class=\"line\">Exception in thread &quot;http-apr-10090-Acceptor-0&quot; java.lang.OutOfMemoryError: unable to create new native thread</div><div class=\"line\">        at java.lang.Thread.start0(Native Method)</div><div class=\"line\">        at java.lang.Thread.start(Thread.java:714)</div><div class=\"line\">        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:950)</div><div class=\"line\">        at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1368)</div><div class=\"line\">        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:161)</div><div class=\"line\">        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:141)</div><div class=\"line\">        at org.apache.catalina.core.StandardThreadExecutor.execute(StandardThreadExecutor.java:169)</div><div class=\"line\">        at org.apache.tomcat.util.net.AprEndpoint.processSocketWithOptions(AprEndpoint.java:909)</div><div class=\"line\">        at org.apache.tomcat.util.net.AprEndpoint$Acceptor.run(AprEndpoint.java:1086)</div><div class=\"line\">        at java.lang.Thread.run(Thread.java:745)</div></pre></td></tr></table></figure>\n<h2 id=\"원인\"><a href=\"#원인\" class=\"headerlink\" title=\"원인\"></a>원인</h2><ol>\n<li><a href=\"https://github.com/spring-projects/spring-session\" target=\"_blank\" rel=\"external\">spring-session</a>에서 [spring-data-redis]를 사용할 때 <a href=\"https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/listener/RedisMessageListenerContainer.java#L97\" target=\"_blank\" rel=\"external\">RedisMessageListenerContainer의 taskExecutor</a>에 별도의 값을 설정하지 않아서 <a href=\"https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java\" target=\"_blank\" rel=\"external\">SimpleAsyncTaskExecutor</a>를 사용하고 있음</li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/SimpleAsyncTaskExecutor.html\" target=\"_blank\" rel=\"external\">SimpleAsyncTaskExecutor 문서</a>에서 이 클래스는 쓰레드를 재사용하지 않으니 실행시간이 짧은 많은 수의 작업에는 사용하지 말라고 권장하고 있음<ul>\n<li><code>NOTE: This implementation does not reuse threads! Consider a thread-pooling TaskExecutor implementation instead, in particular for executing a large number of short-lived tasks.</code></li>\n</ul>\n</li>\n<li>spring-session에서 세션정보에 접근하기 위해서 redis를 사용할 때 마다 Thread가 매번 생성됨</li>\n<li>접속량이 많이지게 되면 <code>OutOfMemoryError</code> 발생</li>\n</ol>\n<h2 id=\"해결책\"><a href=\"#해결책\" class=\"headerlink\" title=\"해결책\"></a>해결책</h2><ol>\n<li>SimpleAsyncTaskExecutor 대신에 ThreadPool을 사용할 수 있도록 지정한다</li>\n<li>하지만 지금 사용중인 <code>spring-session-1.0.2.RELEASE</code> 버전에서는 taskExecutor를 별도로 지정할 수 있는 방법이 없음</li>\n<li>결국 <code>spring-session-1.3.1.RELEASE</code> 버전으로 업데이트</li>\n<li><a href=\"https://github.com/tsachev/spring-session/commit/6604bf180221028aff47f999418c0d48db72fb92\" target=\"_blank\" rel=\"external\">패치된 내용</a>을 바탕으로 <code>springSessionRedisTaskExecutor</code>를 지정</li>\n<li><code>springSessionRedisTaskExecutor</code>를 지정하면 일어나는 일<ol>\n<li><code>springSessionRedisTaskExecutor</code>를 지정하면 <code>RedisHttpSessionConfiguration.redisTaskExecutor</code>에 지정한 <code>springSessionRedisTaskExecutor</code>가 할당 됨 <a href=\"https://github.com/spring-projects/spring-session/blob/master/spring-session-data-redis/src/main/java/org/springframework/session/data/redis/config/annotation/web/http/RedisHttpSessionConfiguration.java#L203\" target=\"_blank\" rel=\"external\">소스코드</a></li>\n<li><code>RedisMessageListenerContainer.taskExecutor</code>에 <code>RedisHttpSessionConfiguration.redisTaskExecutor</code>가 할당 됨 <a href=\"https://github.com/spring-projects/spring-session/blob/master/spring-session-data-redis/src/main/java/org/springframework/session/data/redis/config/annotation/web/http/RedisHttpSessionConfiguration.java#L93\" target=\"_blank\" rel=\"external\">소스코드</a></li>\n<li>spring-session에서 redis를 사용할 때 <code>springSessionRedisTaskExecutor</code>를 사용하게 됨 <a href=\"https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/listener/RedisMessageListenerContainer.java#L961\" target=\"_blank\" rel=\"external\">소스코드</a></li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrontSessionConfig</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">springSessionRedisTaskExecutor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ThreadFactory threadFactory = <span class=\"keyword\">new</span> ThreadFactory() &#123;</div><div class=\"line\">            <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Thread(runnable, String.format(<span class=\"string\">\"gajago-session-redis-%d\"</span>, ++threadCount));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> Executors.newCachedThreadPool(threadFactory);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"남아있는-과제\"><a href=\"#남아있는-과제\" class=\"headerlink\" title=\"남아있는 과제\"></a>남아있는 과제</h2><ol>\n<li>왜 1번 서버는 안 죽고 2번 서버만 죽었을까?</li>\n<li>KT 로드밸런서가 왜 2번 서버로 계속 요청을 보냈을까?</li>\n<li>캐시로 사용하고 있는 redis의 taskExecutor는?</li>\n</ol>\n<h2 id=\"관련자료\"><a href=\"#관련자료\" class=\"headerlink\" title=\"관련자료\"></a>관련자료</h2><ul>\n<li><a href=\"https://github.com/spring-projects/spring-session\" target=\"_blank\" rel=\"external\">https://github.com/spring-projects/spring-session</a></li>\n<li><a href=\"https://github.com/tsachev/spring-session/commit/6604bf180221028aff47f999418c0d48db72fb92\" target=\"_blank\" rel=\"external\">https://github.com/tsachev/spring-session/commit/6604bf180221028aff47f999418c0d48db72fb92</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java\" target=\"_blank\" rel=\"external\">https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java</a></li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/SimpleAsyncTaskExecutor.html\" target=\"_blank\" rel=\"external\">https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/SimpleAsyncTaskExecutor.html</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"Trouble-Shooting-spring-session-OOME\"><a href=\"#Trouble-Shooting-spring-session-OOME\" class=\"headerlink\" title=\"[Trouble Shooting] spring-session OOME\"></a>[Trouble Shooting] spring-session OOME</h1><h2 id=\"증상\"><a href=\"#증상\" class=\"headerlink\" title=\"증상\"></a>증상</h2><ol>\n<li>2번 서버가 OutOfMemoryError로 갑자기 죽어버렸음</li>\n<li>KT 로드밸런서가 2번 서버로 계속 요청을 보냄</li>\n<li>사용자의 요청이 1번 서버로만 간 경우 정상적으로 서비스를 이용</li>\n<li>사용자의 요청이 2번으로 하나라도 가면 API의 응답을 받지 못함</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div></pre></td><td class=\"code\"><pre><div class=\"line\">2017-08-04 19:40:51 [gajago-front] [redisMessageListenerContainer-1] ERROR org.springframework.data.redis.listener.RedisMessageListenerContainer:handleSubscriptionException:648 - SubscriptionTask aborted with exception:</div><div class=\"line\">java.lang.OutOfMemoryError: unable to create new native thread</div><div class=\"line\">        at java.lang.Thread.start0(Native Method)</div><div class=\"line\">        at java.lang.Thread.start(Thread.java:714)</div><div class=\"line\">        at org.springframework.core.task.SimpleAsyncTaskExecutor.doExecute(SimpleAsyncTaskExecutor.java:213)</div><div class=\"line\">        at org.springframework.core.task.SimpleAsyncTaskExecutor.execute(SimpleAsyncTaskExecutor.java:171)</div><div class=\"line\">        at org.springframework.core.task.SimpleAsyncTaskExecutor.execute(SimpleAsyncTaskExecutor.java:151)</div><div class=\"line\">        at org.springframework.data.redis.listener.RedisMessageListenerContainer.dispatchMessage(RedisMessageListenerContainer.java:958)</div><div class=\"line\">        at org.springframework.data.redis.listener.RedisMessageListenerContainer.access$1400(RedisMessageListenerContainer.java:71)</div><div class=\"line\">        at org.springframework.data.redis.listener.RedisMessageListenerContainer$DispatchMessageListener.onMessage(RedisMessageListenerContainer.java:949)</div><div class=\"line\">        at org.springframework.data.redis.connection.jedis.JedisMessageListener.onPMessage(JedisMessageListener.java:43)</div><div class=\"line\">        at redis.clients.jedis.BinaryJedisPubSub.process(BinaryJedisPubSub.java:109)</div><div class=\"line\">        at redis.clients.jedis.BinaryJedisPubSub.proceedWithPatterns(BinaryJedisPubSub.java:75)</div><div class=\"line\">        at redis.clients.jedis.BinaryJedis.psubscribe(BinaryJedis.java:2953)</div><div class=\"line\">        at org.springframework.data.redis.connection.jedis.JedisConnection.pSubscribe(JedisConnection.java:2959)</div><div class=\"line\">        at org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask.eventuallyPerformSubscription(RedisMessageListenerContainer.java:773)</div><div class=\"line\">        at org.springframework.data.redis.listener.RedisMessageListenerContainer$SubscriptionTask.run(RedisMessageListenerContainer.java:740)</div><div class=\"line\">        at java.lang.Thread.run(Thread.java:745)</div><div class=\"line\">Exception in thread &quot;http-apr-10090-Acceptor-0&quot; java.lang.OutOfMemoryError: unable to create new native thread</div><div class=\"line\">        at java.lang.Thread.start0(Native Method)</div><div class=\"line\">        at java.lang.Thread.start(Thread.java:714)</div><div class=\"line\">        at java.util.concurrent.ThreadPoolExecutor.addWorker(ThreadPoolExecutor.java:950)</div><div class=\"line\">        at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1368)</div><div class=\"line\">        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:161)</div><div class=\"line\">        at org.apache.tomcat.util.threads.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:141)</div><div class=\"line\">        at org.apache.catalina.core.StandardThreadExecutor.execute(StandardThreadExecutor.java:169)</div><div class=\"line\">        at org.apache.tomcat.util.net.AprEndpoint.processSocketWithOptions(AprEndpoint.java:909)</div><div class=\"line\">        at org.apache.tomcat.util.net.AprEndpoint$Acceptor.run(AprEndpoint.java:1086)</div><div class=\"line\">        at java.lang.Thread.run(Thread.java:745)</div></pre></td></tr></table></figure>\n<h2 id=\"원인\"><a href=\"#원인\" class=\"headerlink\" title=\"원인\"></a>원인</h2><ol>\n<li><a href=\"https://github.com/spring-projects/spring-session\" target=\"_blank\" rel=\"external\">spring-session</a>에서 [spring-data-redis]를 사용할 때 <a href=\"https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/listener/RedisMessageListenerContainer.java#L97\" target=\"_blank\" rel=\"external\">RedisMessageListenerContainer의 taskExecutor</a>에 별도의 값을 설정하지 않아서 <a href=\"https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java\" target=\"_blank\" rel=\"external\">SimpleAsyncTaskExecutor</a>를 사용하고 있음</li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/SimpleAsyncTaskExecutor.html\" target=\"_blank\" rel=\"external\">SimpleAsyncTaskExecutor 문서</a>에서 이 클래스는 쓰레드를 재사용하지 않으니 실행시간이 짧은 많은 수의 작업에는 사용하지 말라고 권장하고 있음<ul>\n<li><code>NOTE: This implementation does not reuse threads! Consider a thread-pooling TaskExecutor implementation instead, in particular for executing a large number of short-lived tasks.</code></li>\n</ul>\n</li>\n<li>spring-session에서 세션정보에 접근하기 위해서 redis를 사용할 때 마다 Thread가 매번 생성됨</li>\n<li>접속량이 많이지게 되면 <code>OutOfMemoryError</code> 발생</li>\n</ol>\n<h2 id=\"해결책\"><a href=\"#해결책\" class=\"headerlink\" title=\"해결책\"></a>해결책</h2><ol>\n<li>SimpleAsyncTaskExecutor 대신에 ThreadPool을 사용할 수 있도록 지정한다</li>\n<li>하지만 지금 사용중인 <code>spring-session-1.0.2.RELEASE</code> 버전에서는 taskExecutor를 별도로 지정할 수 있는 방법이 없음</li>\n<li>결국 <code>spring-session-1.3.1.RELEASE</code> 버전으로 업데이트</li>\n<li><a href=\"https://github.com/tsachev/spring-session/commit/6604bf180221028aff47f999418c0d48db72fb92\" target=\"_blank\" rel=\"external\">패치된 내용</a>을 바탕으로 <code>springSessionRedisTaskExecutor</code>를 지정</li>\n<li><code>springSessionRedisTaskExecutor</code>를 지정하면 일어나는 일<ol>\n<li><code>springSessionRedisTaskExecutor</code>를 지정하면 <code>RedisHttpSessionConfiguration.redisTaskExecutor</code>에 지정한 <code>springSessionRedisTaskExecutor</code>가 할당 됨 <a href=\"https://github.com/spring-projects/spring-session/blob/master/spring-session-data-redis/src/main/java/org/springframework/session/data/redis/config/annotation/web/http/RedisHttpSessionConfiguration.java#L203\" target=\"_blank\" rel=\"external\">소스코드</a></li>\n<li><code>RedisMessageListenerContainer.taskExecutor</code>에 <code>RedisHttpSessionConfiguration.redisTaskExecutor</code>가 할당 됨 <a href=\"https://github.com/spring-projects/spring-session/blob/master/spring-session-data-redis/src/main/java/org/springframework/session/data/redis/config/annotation/web/http/RedisHttpSessionConfiguration.java#L93\" target=\"_blank\" rel=\"external\">소스코드</a></li>\n<li>spring-session에서 redis를 사용할 때 <code>springSessionRedisTaskExecutor</code>를 사용하게 됨 <a href=\"https://github.com/spring-projects/spring-data-redis/blob/master/src/main/java/org/springframework/data/redis/listener/RedisMessageListenerContainer.java#L961\" target=\"_blank\" rel=\"external\">소스코드</a></li>\n</ol>\n</li>\n</ol>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"meta\">@Configuration</span></div><div class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FrontSessionConfig</span> </span>&#123;</div><div class=\"line\">    <span class=\"meta\">@Bean</span></div><div class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Executor <span class=\"title\">springSessionRedisTaskExecutor</span><span class=\"params\">()</span> </span>&#123;</div><div class=\"line\">        ThreadFactory threadFactory = <span class=\"keyword\">new</span> ThreadFactory() &#123;</div><div class=\"line\">            <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> threadCount = <span class=\"number\">0</span>;</div><div class=\"line\"></div><div class=\"line\">            <span class=\"meta\">@Override</span></div><div class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Thread <span class=\"title\">newThread</span><span class=\"params\">(Runnable runnable)</span> </span>&#123;</div><div class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> Thread(runnable, String.format(<span class=\"string\">\"gajago-session-redis-%d\"</span>, ++threadCount));</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;;</div><div class=\"line\"></div><div class=\"line\">        <span class=\"keyword\">return</span> Executors.newCachedThreadPool(threadFactory);</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h2 id=\"남아있는-과제\"><a href=\"#남아있는-과제\" class=\"headerlink\" title=\"남아있는 과제\"></a>남아있는 과제</h2><ol>\n<li>왜 1번 서버는 안 죽고 2번 서버만 죽었을까?</li>\n<li>KT 로드밸런서가 왜 2번 서버로 계속 요청을 보냈을까?</li>\n<li>캐시로 사용하고 있는 redis의 taskExecutor는?</li>\n</ol>\n<h2 id=\"관련자료\"><a href=\"#관련자료\" class=\"headerlink\" title=\"관련자료\"></a>관련자료</h2><ul>\n<li><a href=\"https://github.com/spring-projects/spring-session\" target=\"_blank\" rel=\"external\">https://github.com/spring-projects/spring-session</a></li>\n<li><a href=\"https://github.com/tsachev/spring-session/commit/6604bf180221028aff47f999418c0d48db72fb92\" target=\"_blank\" rel=\"external\">https://github.com/tsachev/spring-session/commit/6604bf180221028aff47f999418c0d48db72fb92</a></li>\n<li><a href=\"https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java\" target=\"_blank\" rel=\"external\">https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/task/SimpleAsyncTaskExecutor.java</a></li>\n<li><a href=\"https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/SimpleAsyncTaskExecutor.html\" target=\"_blank\" rel=\"external\">https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/task/SimpleAsyncTaskExecutor.html</a></li>\n</ul>\n"}],"PostAsset":[{"_id":"source/_posts/server-network-perf/highway-393492_1920.jpg","slug":"highway-393492_1920.jpg","post":"cj7wnldaw000133yozt4hngem","modified":1,"renderable":0},{"_id":"source/_posts/ts-ios-wifi-webkit-error/webkit-error.png","post":"cj7wnldaz000233yodod8n80g","slug":"webkit-error.png","modified":1,"renderable":1},{"_id":"source/_posts/how-cookie-works/breadcrumbs.jpg","post":"cj7wnldar000033yolv6hxmb8","slug":"breadcrumbs.jpg","modified":1,"renderable":1},{"_id":"source/_posts/how-cookie-works/dev-tools-cookie.png","slug":"dev-tools-cookie.png","post":"cj7wnldar000033yolv6hxmb8","modified":1,"renderable":0},{"_id":"source/_posts/how-cookie-works/http-req-res.png","post":"cj7wnldar000033yolv6hxmb8","slug":"http-req-res.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[],"Tag":[]}}